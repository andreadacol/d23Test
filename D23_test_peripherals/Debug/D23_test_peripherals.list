
D23_test_peripherals.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d14  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004e9c  08004e9c  00014e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ed4  08004ed4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004ed4  08004ed4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ed4  08004ed4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ed4  08004ed4  00014ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ed8  08004ed8  00014ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004edc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006ac  2000000c  08004ee8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006b8  08004ee8  000206b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017a88  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b80  00000000  00000000  00037b07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014b8  00000000  00000000  0003a688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001053  00000000  00000000  0003bb40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d7dc  00000000  00000000  0003cb93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000191fe  00000000  00000000  0005a36f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b2f6b  00000000  00000000  0007356d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000059a0  00000000  00000000  001264d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0012be78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004e84 	.word	0x08004e84

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004e84 	.word	0x08004e84

080001c8 <test_gpio>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void test_gpio (void) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80001cc:	2201      	movs	r2, #1
 80001ce:	214f      	movs	r1, #79	; 0x4f
 80001d0:	4819      	ldr	r0, [pc, #100]	; (8000238 <test_gpio+0x70>)
 80001d2:	f001 fb95 	bl	8001900 <HAL_GPIO_WritePin>
						  |GPIO_PIN_6, GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_SET);
 80001d6:	2201      	movs	r2, #1
 80001d8:	2154      	movs	r1, #84	; 0x54
 80001da:	4818      	ldr	r0, [pc, #96]	; (800023c <test_gpio+0x74>)
 80001dc:	f001 fb90 	bl	8001900 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80001e0:	2201      	movs	r2, #1
 80001e2:	216f      	movs	r1, #111	; 0x6f
 80001e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001e8:	f001 fb8a 	bl	8001900 <HAL_GPIO_WritePin>
						  |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80001ec:	2201      	movs	r2, #1
 80001ee:	f640 4107 	movw	r1, #3079	; 0xc07
 80001f2:	4813      	ldr	r0, [pc, #76]	; (8000240 <test_gpio+0x78>)
 80001f4:	f001 fb84 	bl	8001900 <HAL_GPIO_WritePin>
						  |GPIO_PIN_11, GPIO_PIN_SET);

	HAL_Delay(1000);
 80001f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001fc:	f001 f800 	bl	8001200 <HAL_Delay>


	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000200:	2200      	movs	r2, #0
 8000202:	214f      	movs	r1, #79	; 0x4f
 8000204:	480c      	ldr	r0, [pc, #48]	; (8000238 <test_gpio+0x70>)
 8000206:	f001 fb7b 	bl	8001900 <HAL_GPIO_WritePin>
						  |GPIO_PIN_6, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 800020a:	2200      	movs	r2, #0
 800020c:	2154      	movs	r1, #84	; 0x54
 800020e:	480b      	ldr	r0, [pc, #44]	; (800023c <test_gpio+0x74>)
 8000210:	f001 fb76 	bl	8001900 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000214:	2200      	movs	r2, #0
 8000216:	216f      	movs	r1, #111	; 0x6f
 8000218:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800021c:	f001 fb70 	bl	8001900 <HAL_GPIO_WritePin>
						  |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000220:	2200      	movs	r2, #0
 8000222:	f640 4107 	movw	r1, #3079	; 0xc07
 8000226:	4806      	ldr	r0, [pc, #24]	; (8000240 <test_gpio+0x78>)
 8000228:	f001 fb6a 	bl	8001900 <HAL_GPIO_WritePin>
						  |GPIO_PIN_11, GPIO_PIN_RESET);

	HAL_Delay(1000);
 800022c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000230:	f000 ffe6 	bl	8001200 <HAL_Delay>

}
 8000234:	bf00      	nop
 8000236:	bd80      	pop	{r7, pc}
 8000238:	48000800 	.word	0x48000800
 800023c:	48001400 	.word	0x48001400
 8000240:	48000400 	.word	0x48000400

08000244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000248:	f000 ff74 	bl	8001134 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024c:	f000 f81a 	bl	8000284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000250:	f000 fb1e 	bl	8000890 <MX_GPIO_Init>
  MX_CAN_Init();
 8000254:	f000 f87c 	bl	8000350 <MX_CAN_Init>
  MX_I2C1_Init();
 8000258:	f000 f8ae 	bl	80003b8 <MX_I2C1_Init>
  MX_I2C2_Init();
 800025c:	f000 f8ec 	bl	8000438 <MX_I2C2_Init>
  MX_SPI2_Init();
 8000260:	f000 f92a 	bl	80004b8 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000264:	f000 f966 	bl	8000534 <MX_TIM1_Init>
  MX_UART5_Init();
 8000268:	f000 fa2e 	bl	80006c8 <MX_UART5_Init>
  MX_USART1_UART_Init();
 800026c:	f000 fa5c 	bl	8000728 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000270:	f000 fa8a 	bl	8000788 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000274:	f000 fab8 	bl	80007e8 <MX_USART3_UART_Init>
  MX_USB_PCD_Init();
 8000278:	f000 fae8 	bl	800084c <MX_USB_PCD_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	test_gpio();
 800027c:	f7ff ffa4 	bl	80001c8 <test_gpio>
 8000280:	e7fc      	b.n	800027c <main+0x38>
	...

08000284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b09c      	sub	sp, #112	; 0x70
 8000288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800028e:	2228      	movs	r2, #40	; 0x28
 8000290:	2100      	movs	r1, #0
 8000292:	4618      	mov	r0, r3
 8000294:	f004 fdca 	bl	8004e2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000298:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800029c:	2200      	movs	r2, #0
 800029e:	601a      	str	r2, [r3, #0]
 80002a0:	605a      	str	r2, [r3, #4]
 80002a2:	609a      	str	r2, [r3, #8]
 80002a4:	60da      	str	r2, [r3, #12]
 80002a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002a8:	463b      	mov	r3, r7
 80002aa:	2234      	movs	r2, #52	; 0x34
 80002ac:	2100      	movs	r1, #0
 80002ae:	4618      	mov	r0, r3
 80002b0:	f004 fdbc 	bl	8004e2c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002b4:	2302      	movs	r3, #2
 80002b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b8:	2301      	movs	r3, #1
 80002ba:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002bc:	2310      	movs	r3, #16
 80002be:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c0:	2302      	movs	r3, #2
 80002c2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002c4:	2300      	movs	r3, #0
 80002c6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80002c8:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80002cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80002d2:	4618      	mov	r0, r3
 80002d4:	f001 fd24 	bl	8001d20 <HAL_RCC_OscConfig>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002de:	f000 fbcb 	bl	8000a78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e2:	230f      	movs	r3, #15
 80002e4:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002e6:	2300      	movs	r3, #0
 80002e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ea:	2300      	movs	r3, #0
 80002ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ee:	2300      	movs	r3, #0
 80002f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f2:	2300      	movs	r3, #0
 80002f4:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80002fa:	2100      	movs	r1, #0
 80002fc:	4618      	mov	r0, r3
 80002fe:	f002 fd4d 	bl	8002d9c <HAL_RCC_ClockConfig>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000308:	f000 fbb6 	bl	8000a78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 800030c:	4b0f      	ldr	r3, [pc, #60]	; (800034c <SystemClock_Config+0xc8>)
 800030e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000310:	2300      	movs	r3, #0
 8000312:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000314:	2300      	movs	r3, #0
 8000316:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000318:	2300      	movs	r3, #0
 800031a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800031c:	2300      	movs	r3, #0
 800031e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000320:	2300      	movs	r3, #0
 8000322:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8000324:	2300      	movs	r3, #0
 8000326:	623b      	str	r3, [r7, #32]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000328:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800032c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800032e:	2300      	movs	r3, #0
 8000330:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000332:	463b      	mov	r3, r7
 8000334:	4618      	mov	r0, r3
 8000336:	f002 ff67 	bl	8003208 <HAL_RCCEx_PeriphCLKConfig>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000340:	f000 fb9a 	bl	8000a78 <Error_Handler>
  }
}
 8000344:	bf00      	nop
 8000346:	3770      	adds	r7, #112	; 0x70
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}
 800034c:	00021077 	.word	0x00021077

08000350 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000354:	4b16      	ldr	r3, [pc, #88]	; (80003b0 <MX_CAN_Init+0x60>)
 8000356:	4a17      	ldr	r2, [pc, #92]	; (80003b4 <MX_CAN_Init+0x64>)
 8000358:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800035a:	4b15      	ldr	r3, [pc, #84]	; (80003b0 <MX_CAN_Init+0x60>)
 800035c:	2210      	movs	r2, #16
 800035e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000360:	4b13      	ldr	r3, [pc, #76]	; (80003b0 <MX_CAN_Init+0x60>)
 8000362:	2200      	movs	r2, #0
 8000364:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000366:	4b12      	ldr	r3, [pc, #72]	; (80003b0 <MX_CAN_Init+0x60>)
 8000368:	2200      	movs	r2, #0
 800036a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 800036c:	4b10      	ldr	r3, [pc, #64]	; (80003b0 <MX_CAN_Init+0x60>)
 800036e:	2200      	movs	r2, #0
 8000370:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000372:	4b0f      	ldr	r3, [pc, #60]	; (80003b0 <MX_CAN_Init+0x60>)
 8000374:	2200      	movs	r2, #0
 8000376:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000378:	4b0d      	ldr	r3, [pc, #52]	; (80003b0 <MX_CAN_Init+0x60>)
 800037a:	2200      	movs	r2, #0
 800037c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800037e:	4b0c      	ldr	r3, [pc, #48]	; (80003b0 <MX_CAN_Init+0x60>)
 8000380:	2200      	movs	r2, #0
 8000382:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000384:	4b0a      	ldr	r3, [pc, #40]	; (80003b0 <MX_CAN_Init+0x60>)
 8000386:	2200      	movs	r2, #0
 8000388:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800038a:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <MX_CAN_Init+0x60>)
 800038c:	2200      	movs	r2, #0
 800038e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000390:	4b07      	ldr	r3, [pc, #28]	; (80003b0 <MX_CAN_Init+0x60>)
 8000392:	2200      	movs	r2, #0
 8000394:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000396:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <MX_CAN_Init+0x60>)
 8000398:	2200      	movs	r2, #0
 800039a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800039c:	4804      	ldr	r0, [pc, #16]	; (80003b0 <MX_CAN_Init+0x60>)
 800039e:	f000 ff53 	bl	8001248 <HAL_CAN_Init>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80003a8:	f000 fb66 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80003ac:	bf00      	nop
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	20000028 	.word	0x20000028
 80003b4:	40006400 	.word	0x40006400

080003b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003bc:	4b1b      	ldr	r3, [pc, #108]	; (800042c <MX_I2C1_Init+0x74>)
 80003be:	4a1c      	ldr	r2, [pc, #112]	; (8000430 <MX_I2C1_Init+0x78>)
 80003c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80003c2:	4b1a      	ldr	r3, [pc, #104]	; (800042c <MX_I2C1_Init+0x74>)
 80003c4:	4a1b      	ldr	r2, [pc, #108]	; (8000434 <MX_I2C1_Init+0x7c>)
 80003c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003c8:	4b18      	ldr	r3, [pc, #96]	; (800042c <MX_I2C1_Init+0x74>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003ce:	4b17      	ldr	r3, [pc, #92]	; (800042c <MX_I2C1_Init+0x74>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003d4:	4b15      	ldr	r3, [pc, #84]	; (800042c <MX_I2C1_Init+0x74>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003da:	4b14      	ldr	r3, [pc, #80]	; (800042c <MX_I2C1_Init+0x74>)
 80003dc:	2200      	movs	r2, #0
 80003de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003e0:	4b12      	ldr	r3, [pc, #72]	; (800042c <MX_I2C1_Init+0x74>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003e6:	4b11      	ldr	r3, [pc, #68]	; (800042c <MX_I2C1_Init+0x74>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003ec:	4b0f      	ldr	r3, [pc, #60]	; (800042c <MX_I2C1_Init+0x74>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003f2:	480e      	ldr	r0, [pc, #56]	; (800042c <MX_I2C1_Init+0x74>)
 80003f4:	f001 fa9c 	bl	8001930 <HAL_I2C_Init>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003fe:	f000 fb3b 	bl	8000a78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000402:	2100      	movs	r1, #0
 8000404:	4809      	ldr	r0, [pc, #36]	; (800042c <MX_I2C1_Init+0x74>)
 8000406:	f001 fb22 	bl	8001a4e <HAL_I2CEx_ConfigAnalogFilter>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000410:	f000 fb32 	bl	8000a78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000414:	2100      	movs	r1, #0
 8000416:	4805      	ldr	r0, [pc, #20]	; (800042c <MX_I2C1_Init+0x74>)
 8000418:	f001 fb64 	bl	8001ae4 <HAL_I2CEx_ConfigDigitalFilter>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000422:	f000 fb29 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000426:	bf00      	nop
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	20000050 	.word	0x20000050
 8000430:	40005400 	.word	0x40005400
 8000434:	2000090e 	.word	0x2000090e

08000438 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800043c:	4b1b      	ldr	r3, [pc, #108]	; (80004ac <MX_I2C2_Init+0x74>)
 800043e:	4a1c      	ldr	r2, [pc, #112]	; (80004b0 <MX_I2C2_Init+0x78>)
 8000440:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 8000442:	4b1a      	ldr	r3, [pc, #104]	; (80004ac <MX_I2C2_Init+0x74>)
 8000444:	4a1b      	ldr	r2, [pc, #108]	; (80004b4 <MX_I2C2_Init+0x7c>)
 8000446:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000448:	4b18      	ldr	r3, [pc, #96]	; (80004ac <MX_I2C2_Init+0x74>)
 800044a:	2200      	movs	r2, #0
 800044c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800044e:	4b17      	ldr	r3, [pc, #92]	; (80004ac <MX_I2C2_Init+0x74>)
 8000450:	2201      	movs	r2, #1
 8000452:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000454:	4b15      	ldr	r3, [pc, #84]	; (80004ac <MX_I2C2_Init+0x74>)
 8000456:	2200      	movs	r2, #0
 8000458:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800045a:	4b14      	ldr	r3, [pc, #80]	; (80004ac <MX_I2C2_Init+0x74>)
 800045c:	2200      	movs	r2, #0
 800045e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000460:	4b12      	ldr	r3, [pc, #72]	; (80004ac <MX_I2C2_Init+0x74>)
 8000462:	2200      	movs	r2, #0
 8000464:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000466:	4b11      	ldr	r3, [pc, #68]	; (80004ac <MX_I2C2_Init+0x74>)
 8000468:	2200      	movs	r2, #0
 800046a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800046c:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <MX_I2C2_Init+0x74>)
 800046e:	2200      	movs	r2, #0
 8000470:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000472:	480e      	ldr	r0, [pc, #56]	; (80004ac <MX_I2C2_Init+0x74>)
 8000474:	f001 fa5c 	bl	8001930 <HAL_I2C_Init>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800047e:	f000 fafb 	bl	8000a78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000482:	2100      	movs	r1, #0
 8000484:	4809      	ldr	r0, [pc, #36]	; (80004ac <MX_I2C2_Init+0x74>)
 8000486:	f001 fae2 	bl	8001a4e <HAL_I2CEx_ConfigAnalogFilter>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000490:	f000 faf2 	bl	8000a78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000494:	2100      	movs	r1, #0
 8000496:	4805      	ldr	r0, [pc, #20]	; (80004ac <MX_I2C2_Init+0x74>)
 8000498:	f001 fb24 	bl	8001ae4 <HAL_I2CEx_ConfigDigitalFilter>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80004a2:	f000 fae9 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80004a6:	bf00      	nop
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	200000a4 	.word	0x200000a4
 80004b0:	40005800 	.word	0x40005800
 80004b4:	2000090e 	.word	0x2000090e

080004b8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80004bc:	4b1b      	ldr	r3, [pc, #108]	; (800052c <MX_SPI2_Init+0x74>)
 80004be:	4a1c      	ldr	r2, [pc, #112]	; (8000530 <MX_SPI2_Init+0x78>)
 80004c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80004c2:	4b1a      	ldr	r3, [pc, #104]	; (800052c <MX_SPI2_Init+0x74>)
 80004c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80004c8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80004ca:	4b18      	ldr	r3, [pc, #96]	; (800052c <MX_SPI2_Init+0x74>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80004d0:	4b16      	ldr	r3, [pc, #88]	; (800052c <MX_SPI2_Init+0x74>)
 80004d2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80004d6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004d8:	4b14      	ldr	r3, [pc, #80]	; (800052c <MX_SPI2_Init+0x74>)
 80004da:	2200      	movs	r2, #0
 80004dc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004de:	4b13      	ldr	r3, [pc, #76]	; (800052c <MX_SPI2_Init+0x74>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80004e4:	4b11      	ldr	r3, [pc, #68]	; (800052c <MX_SPI2_Init+0x74>)
 80004e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004ea:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80004ec:	4b0f      	ldr	r3, [pc, #60]	; (800052c <MX_SPI2_Init+0x74>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004f2:	4b0e      	ldr	r3, [pc, #56]	; (800052c <MX_SPI2_Init+0x74>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80004f8:	4b0c      	ldr	r3, [pc, #48]	; (800052c <MX_SPI2_Init+0x74>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004fe:	4b0b      	ldr	r3, [pc, #44]	; (800052c <MX_SPI2_Init+0x74>)
 8000500:	2200      	movs	r2, #0
 8000502:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000504:	4b09      	ldr	r3, [pc, #36]	; (800052c <MX_SPI2_Init+0x74>)
 8000506:	2207      	movs	r2, #7
 8000508:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800050a:	4b08      	ldr	r3, [pc, #32]	; (800052c <MX_SPI2_Init+0x74>)
 800050c:	2200      	movs	r2, #0
 800050e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000510:	4b06      	ldr	r3, [pc, #24]	; (800052c <MX_SPI2_Init+0x74>)
 8000512:	2208      	movs	r2, #8
 8000514:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000516:	4805      	ldr	r0, [pc, #20]	; (800052c <MX_SPI2_Init+0x74>)
 8000518:	f003 f808 	bl	800352c <HAL_SPI_Init>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000522:	f000 faa9 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000526:	bf00      	nop
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	200000f8 	.word	0x200000f8
 8000530:	40003800 	.word	0x40003800

08000534 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b09a      	sub	sp, #104	; 0x68
 8000538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800053a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000546:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000554:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]
 8000564:	615a      	str	r2, [r3, #20]
 8000566:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	222c      	movs	r2, #44	; 0x2c
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f004 fc5c 	bl	8004e2c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000574:	4b52      	ldr	r3, [pc, #328]	; (80006c0 <MX_TIM1_Init+0x18c>)
 8000576:	4a53      	ldr	r2, [pc, #332]	; (80006c4 <MX_TIM1_Init+0x190>)
 8000578:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800057a:	4b51      	ldr	r3, [pc, #324]	; (80006c0 <MX_TIM1_Init+0x18c>)
 800057c:	2200      	movs	r2, #0
 800057e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000580:	4b4f      	ldr	r3, [pc, #316]	; (80006c0 <MX_TIM1_Init+0x18c>)
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000586:	4b4e      	ldr	r3, [pc, #312]	; (80006c0 <MX_TIM1_Init+0x18c>)
 8000588:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800058c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800058e:	4b4c      	ldr	r3, [pc, #304]	; (80006c0 <MX_TIM1_Init+0x18c>)
 8000590:	2200      	movs	r2, #0
 8000592:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000594:	4b4a      	ldr	r3, [pc, #296]	; (80006c0 <MX_TIM1_Init+0x18c>)
 8000596:	2200      	movs	r2, #0
 8000598:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800059a:	4b49      	ldr	r3, [pc, #292]	; (80006c0 <MX_TIM1_Init+0x18c>)
 800059c:	2200      	movs	r2, #0
 800059e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80005a0:	4847      	ldr	r0, [pc, #284]	; (80006c0 <MX_TIM1_Init+0x18c>)
 80005a2:	f003 f8cf 	bl	8003744 <HAL_TIM_IC_Init>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80005ac:	f000 fa64 	bl	8000a78 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80005b0:	4843      	ldr	r0, [pc, #268]	; (80006c0 <MX_TIM1_Init+0x18c>)
 80005b2:	f003 f866 	bl	8003682 <HAL_TIM_OC_Init>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80005bc:	f000 fa5c 	bl	8000a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005c0:	2300      	movs	r3, #0
 80005c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80005c4:	2300      	movs	r3, #0
 80005c6:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005c8:	2300      	movs	r3, #0
 80005ca:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005cc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80005d0:	4619      	mov	r1, r3
 80005d2:	483b      	ldr	r0, [pc, #236]	; (80006c0 <MX_TIM1_Init+0x18c>)
 80005d4:	f003 fe64 	bl	80042a0 <HAL_TIMEx_MasterConfigSynchronization>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 80005de:	f000 fa4b 	bl	8000a78 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80005e2:	2300      	movs	r3, #0
 80005e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80005e6:	2301      	movs	r3, #1
 80005e8:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigIC.ICFilter = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80005f2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80005f6:	2200      	movs	r2, #0
 80005f8:	4619      	mov	r1, r3
 80005fa:	4831      	ldr	r0, [pc, #196]	; (80006c0 <MX_TIM1_Init+0x18c>)
 80005fc:	f003 f974 	bl	80038e8 <HAL_TIM_IC_ConfigChannel>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000606:	f000 fa37 	bl	8000a78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800060a:	2300      	movs	r3, #0
 800060c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000612:	2300      	movs	r3, #0
 8000614:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000616:	2300      	movs	r3, #0
 8000618:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800061a:	2300      	movs	r3, #0
 800061c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800061e:	2300      	movs	r3, #0
 8000620:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000622:	2300      	movs	r3, #0
 8000624:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000626:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800062a:	2204      	movs	r2, #4
 800062c:	4619      	mov	r1, r3
 800062e:	4824      	ldr	r0, [pc, #144]	; (80006c0 <MX_TIM1_Init+0x18c>)
 8000630:	f003 f8e0 	bl	80037f4 <HAL_TIM_OC_ConfigChannel>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 800063a:	f000 fa1d 	bl	8000a78 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800063e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000642:	2208      	movs	r2, #8
 8000644:	4619      	mov	r1, r3
 8000646:	481e      	ldr	r0, [pc, #120]	; (80006c0 <MX_TIM1_Init+0x18c>)
 8000648:	f003 f8d4 	bl	80037f4 <HAL_TIM_OC_ConfigChannel>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 8000652:	f000 fa11 	bl	8000a78 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000656:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800065a:	220c      	movs	r2, #12
 800065c:	4619      	mov	r1, r3
 800065e:	4818      	ldr	r0, [pc, #96]	; (80006c0 <MX_TIM1_Init+0x18c>)
 8000660:	f003 f942 	bl	80038e8 <HAL_TIM_IC_ConfigChannel>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 800066a:	f000 fa05 	bl	8000a78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800066e:	2300      	movs	r3, #0
 8000670:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000672:	2300      	movs	r3, #0
 8000674:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000676:	2300      	movs	r3, #0
 8000678:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000682:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000686:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800068c:	2300      	movs	r3, #0
 800068e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000690:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800069a:	2300      	movs	r3, #0
 800069c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	4619      	mov	r1, r3
 80006a2:	4807      	ldr	r0, [pc, #28]	; (80006c0 <MX_TIM1_Init+0x18c>)
 80006a4:	f003 fe70 	bl	8004388 <HAL_TIMEx_ConfigBreakDeadTime>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_TIM1_Init+0x17e>
  {
    Error_Handler();
 80006ae:	f000 f9e3 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80006b2:	4803      	ldr	r0, [pc, #12]	; (80006c0 <MX_TIM1_Init+0x18c>)
 80006b4:	f000 fb4c 	bl	8000d50 <HAL_TIM_MspPostInit>

}
 80006b8:	bf00      	nop
 80006ba:	3768      	adds	r7, #104	; 0x68
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	2000015c 	.word	0x2000015c
 80006c4:	40012c00 	.word	0x40012c00

080006c8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80006cc:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_UART5_Init+0x58>)
 80006ce:	4a15      	ldr	r2, [pc, #84]	; (8000724 <MX_UART5_Init+0x5c>)
 80006d0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80006d2:	4b13      	ldr	r3, [pc, #76]	; (8000720 <MX_UART5_Init+0x58>)
 80006d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_UART5_Init+0x58>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_UART5_Init+0x58>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_UART5_Init+0x58>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_UART5_Init+0x58>)
 80006ee:	220c      	movs	r2, #12
 80006f0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <MX_UART5_Init+0x58>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_UART5_Init+0x58>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <MX_UART5_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_UART5_Init+0x58>)
 8000706:	2200      	movs	r2, #0
 8000708:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_UART5_Init+0x58>)
 800070c:	f003 feb4 	bl	8004478 <HAL_UART_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000716:	f000 f9af 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	200001a8 	.word	0x200001a8
 8000724:	40005000 	.word	0x40005000

08000728 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800072c:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_USART1_UART_Init+0x58>)
 800072e:	4a15      	ldr	r2, [pc, #84]	; (8000784 <MX_USART1_UART_Init+0x5c>)
 8000730:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000732:	4b13      	ldr	r3, [pc, #76]	; (8000780 <MX_USART1_UART_Init+0x58>)
 8000734:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000738:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_USART1_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <MX_USART1_UART_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_USART1_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_USART1_UART_Init+0x58>)
 800074e:	220c      	movs	r2, #12
 8000750:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <MX_USART1_UART_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_USART1_UART_Init+0x58>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <MX_USART1_UART_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_USART1_UART_Init+0x58>)
 8000766:	2200      	movs	r2, #0
 8000768:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800076a:	4805      	ldr	r0, [pc, #20]	; (8000780 <MX_USART1_UART_Init+0x58>)
 800076c:	f003 fe84 	bl	8004478 <HAL_UART_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000776:	f000 f97f 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000230 	.word	0x20000230
 8000784:	40013800 	.word	0x40013800

08000788 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800078c:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 800078e:	4a15      	ldr	r2, [pc, #84]	; (80007e4 <MX_USART2_UART_Init+0x5c>)
 8000790:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 8000794:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000798:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ca:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007cc:	f003 fe54 	bl	8004478 <HAL_UART_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007d6:	f000 f94f 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	200002b8 	.word	0x200002b8
 80007e4:	40004400 	.word	0x40004400

080007e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007ec:	4b15      	ldr	r3, [pc, #84]	; (8000844 <MX_USART3_UART_Init+0x5c>)
 80007ee:	4a16      	ldr	r2, [pc, #88]	; (8000848 <MX_USART3_UART_Init+0x60>)
 80007f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007f2:	4b14      	ldr	r3, [pc, #80]	; (8000844 <MX_USART3_UART_Init+0x5c>)
 80007f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007fa:	4b12      	ldr	r3, [pc, #72]	; (8000844 <MX_USART3_UART_Init+0x5c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000800:	4b10      	ldr	r3, [pc, #64]	; (8000844 <MX_USART3_UART_Init+0x5c>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000806:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_USART3_UART_Init+0x5c>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800080c:	4b0d      	ldr	r3, [pc, #52]	; (8000844 <MX_USART3_UART_Init+0x5c>)
 800080e:	220c      	movs	r2, #12
 8000810:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000812:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_USART3_UART_Init+0x5c>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000818:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <MX_USART3_UART_Init+0x5c>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_USART3_UART_Init+0x5c>)
 8000820:	2200      	movs	r2, #0
 8000822:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000824:	4b07      	ldr	r3, [pc, #28]	; (8000844 <MX_USART3_UART_Init+0x5c>)
 8000826:	2200      	movs	r2, #0
 8000828:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800082a:	2300      	movs	r3, #0
 800082c:	2200      	movs	r2, #0
 800082e:	2100      	movs	r1, #0
 8000830:	4804      	ldr	r0, [pc, #16]	; (8000844 <MX_USART3_UART_Init+0x5c>)
 8000832:	f004 fa58 	bl	8004ce6 <HAL_RS485Ex_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800083c:	f000 f91c 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000340 	.word	0x20000340
 8000848:	40004800 	.word	0x40004800

0800084c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000850:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <MX_USB_PCD_Init+0x3c>)
 8000852:	4a0e      	ldr	r2, [pc, #56]	; (800088c <MX_USB_PCD_Init+0x40>)
 8000854:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_USB_PCD_Init+0x3c>)
 8000858:	2208      	movs	r2, #8
 800085a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <MX_USB_PCD_Init+0x3c>)
 800085e:	2202      	movs	r2, #2
 8000860:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_USB_PCD_Init+0x3c>)
 8000864:	2202      	movs	r2, #2
 8000866:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <MX_USB_PCD_Init+0x3c>)
 800086a:	2200      	movs	r2, #0
 800086c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_USB_PCD_Init+0x3c>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000874:	4804      	ldr	r0, [pc, #16]	; (8000888 <MX_USB_PCD_Init+0x3c>)
 8000876:	f001 f981 	bl	8001b7c <HAL_PCD_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000880:	f000 f8fa 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	200003c8 	.word	0x200003c8
 800088c:	40005c00 	.word	0x40005c00

08000890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08c      	sub	sp, #48	; 0x30
 8000894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008a6:	4b6e      	ldr	r3, [pc, #440]	; (8000a60 <MX_GPIO_Init+0x1d0>)
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	4a6d      	ldr	r2, [pc, #436]	; (8000a60 <MX_GPIO_Init+0x1d0>)
 80008ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008b0:	6153      	str	r3, [r2, #20]
 80008b2:	4b6b      	ldr	r3, [pc, #428]	; (8000a60 <MX_GPIO_Init+0x1d0>)
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008ba:	61bb      	str	r3, [r7, #24]
 80008bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008be:	4b68      	ldr	r3, [pc, #416]	; (8000a60 <MX_GPIO_Init+0x1d0>)
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	4a67      	ldr	r2, [pc, #412]	; (8000a60 <MX_GPIO_Init+0x1d0>)
 80008c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008c8:	6153      	str	r3, [r2, #20]
 80008ca:	4b65      	ldr	r3, [pc, #404]	; (8000a60 <MX_GPIO_Init+0x1d0>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008d6:	4b62      	ldr	r3, [pc, #392]	; (8000a60 <MX_GPIO_Init+0x1d0>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	4a61      	ldr	r2, [pc, #388]	; (8000a60 <MX_GPIO_Init+0x1d0>)
 80008dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008e0:	6153      	str	r3, [r2, #20]
 80008e2:	4b5f      	ldr	r3, [pc, #380]	; (8000a60 <MX_GPIO_Init+0x1d0>)
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	4b5c      	ldr	r3, [pc, #368]	; (8000a60 <MX_GPIO_Init+0x1d0>)
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	4a5b      	ldr	r2, [pc, #364]	; (8000a60 <MX_GPIO_Init+0x1d0>)
 80008f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f8:	6153      	str	r3, [r2, #20]
 80008fa:	4b59      	ldr	r3, [pc, #356]	; (8000a60 <MX_GPIO_Init+0x1d0>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000906:	4b56      	ldr	r3, [pc, #344]	; (8000a60 <MX_GPIO_Init+0x1d0>)
 8000908:	695b      	ldr	r3, [r3, #20]
 800090a:	4a55      	ldr	r2, [pc, #340]	; (8000a60 <MX_GPIO_Init+0x1d0>)
 800090c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000910:	6153      	str	r3, [r2, #20]
 8000912:	4b53      	ldr	r3, [pc, #332]	; (8000a60 <MX_GPIO_Init+0x1d0>)
 8000914:	695b      	ldr	r3, [r3, #20]
 8000916:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800091e:	4b50      	ldr	r3, [pc, #320]	; (8000a60 <MX_GPIO_Init+0x1d0>)
 8000920:	695b      	ldr	r3, [r3, #20]
 8000922:	4a4f      	ldr	r2, [pc, #316]	; (8000a60 <MX_GPIO_Init+0x1d0>)
 8000924:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000928:	6153      	str	r3, [r2, #20]
 800092a:	4b4d      	ldr	r3, [pc, #308]	; (8000a60 <MX_GPIO_Init+0x1d0>)
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000936:	2200      	movs	r2, #0
 8000938:	214f      	movs	r1, #79	; 0x4f
 800093a:	484a      	ldr	r0, [pc, #296]	; (8000a64 <MX_GPIO_Init+0x1d4>)
 800093c:	f000 ffe0 	bl	8001900 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	2154      	movs	r1, #84	; 0x54
 8000944:	4848      	ldr	r0, [pc, #288]	; (8000a68 <MX_GPIO_Init+0x1d8>)
 8000946:	f000 ffdb 	bl	8001900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800094a:	2200      	movs	r2, #0
 800094c:	216f      	movs	r1, #111	; 0x6f
 800094e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000952:	f000 ffd5 	bl	8001900 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000956:	2200      	movs	r2, #0
 8000958:	f640 4107 	movw	r1, #3079	; 0xc07
 800095c:	4843      	ldr	r0, [pc, #268]	; (8000a6c <MX_GPIO_Init+0x1dc>)
 800095e:	f000 ffcf 	bl	8001900 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE8 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000962:	f240 137f 	movw	r3, #383	; 0x17f
 8000966:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000968:	2300      	movs	r3, #0
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	483e      	ldr	r0, [pc, #248]	; (8000a70 <MX_GPIO_Init+0x1e0>)
 8000978:	f000 fe48 	bl	800160c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800097c:	f44f 530e 	mov.w	r3, #9088	; 0x2380
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000982:	2300      	movs	r3, #0
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	4834      	ldr	r0, [pc, #208]	; (8000a64 <MX_GPIO_Init+0x1d4>)
 8000992:	f000 fe3b 	bl	800160c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF9 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000996:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099c:	2300      	movs	r3, #0
 800099e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	4619      	mov	r1, r3
 80009aa:	482f      	ldr	r0, [pc, #188]	; (8000a68 <MX_GPIO_Init+0x1d8>)
 80009ac:	f000 fe2e 	bl	800160c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80009b0:	234f      	movs	r3, #79	; 0x4f
 80009b2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b4:	2301      	movs	r3, #1
 80009b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	4619      	mov	r1, r3
 80009c6:	4827      	ldr	r0, [pc, #156]	; (8000a64 <MX_GPIO_Init+0x1d4>)
 80009c8:	f000 fe20 	bl	800160c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF2 PF4 PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6;
 80009cc:	2354      	movs	r3, #84	; 0x54
 80009ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	4821      	ldr	r0, [pc, #132]	; (8000a68 <MX_GPIO_Init+0x1d8>)
 80009e4:	f000 fe12 	bl	800160c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80009e8:	236f      	movs	r3, #111	; 0x6f
 80009ea:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ec:	2301      	movs	r3, #1
 80009ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a02:	f000 fe03 	bl	800160c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a06:	2380      	movs	r3, #128	; 0x80
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	4619      	mov	r1, r3
 8000a18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a1c:	f000 fdf6 	bl	800160c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000a20:	f640 4307 	movw	r3, #3079	; 0xc07
 8000a24:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	480c      	ldr	r0, [pc, #48]	; (8000a6c <MX_GPIO_Init+0x1dc>)
 8000a3a:	f000 fde7 	bl	800160c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a42:	2300      	movs	r3, #0
 8000a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4808      	ldr	r0, [pc, #32]	; (8000a74 <MX_GPIO_Init+0x1e4>)
 8000a52:	f000 fddb 	bl	800160c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a56:	bf00      	nop
 8000a58:	3730      	adds	r7, #48	; 0x30
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40021000 	.word	0x40021000
 8000a64:	48000800 	.word	0x48000800
 8000a68:	48001400 	.word	0x48001400
 8000a6c:	48000400 	.word	0x48000400
 8000a70:	48001000 	.word	0x48001000
 8000a74:	48000c00 	.word	0x48000c00

08000a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a7c:	b672      	cpsid	i
}
 8000a7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <Error_Handler+0x8>
	...

08000a84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <HAL_MspInit+0x44>)
 8000a8c:	699b      	ldr	r3, [r3, #24]
 8000a8e:	4a0e      	ldr	r2, [pc, #56]	; (8000ac8 <HAL_MspInit+0x44>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6193      	str	r3, [r2, #24]
 8000a96:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <HAL_MspInit+0x44>)
 8000a98:	699b      	ldr	r3, [r3, #24]
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <HAL_MspInit+0x44>)
 8000aa4:	69db      	ldr	r3, [r3, #28]
 8000aa6:	4a08      	ldr	r2, [pc, #32]	; (8000ac8 <HAL_MspInit+0x44>)
 8000aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aac:	61d3      	str	r3, [r2, #28]
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <HAL_MspInit+0x44>)
 8000ab0:	69db      	ldr	r3, [r3, #28]
 8000ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	40021000 	.word	0x40021000

08000acc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	; 0x28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a17      	ldr	r2, [pc, #92]	; (8000b48 <HAL_CAN_MspInit+0x7c>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d128      	bne.n	8000b40 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000aee:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <HAL_CAN_MspInit+0x80>)
 8000af0:	69db      	ldr	r3, [r3, #28]
 8000af2:	4a16      	ldr	r2, [pc, #88]	; (8000b4c <HAL_CAN_MspInit+0x80>)
 8000af4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000af8:	61d3      	str	r3, [r2, #28]
 8000afa:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <HAL_CAN_MspInit+0x80>)
 8000afc:	69db      	ldr	r3, [r3, #28]
 8000afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b06:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <HAL_CAN_MspInit+0x80>)
 8000b08:	695b      	ldr	r3, [r3, #20]
 8000b0a:	4a10      	ldr	r2, [pc, #64]	; (8000b4c <HAL_CAN_MspInit+0x80>)
 8000b0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b10:	6153      	str	r3, [r2, #20]
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <HAL_CAN_MspInit+0x80>)
 8000b14:	695b      	ldr	r3, [r3, #20]
 8000b16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	2302      	movs	r3, #2
 8000b26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000b30:	2309      	movs	r3, #9
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4805      	ldr	r0, [pc, #20]	; (8000b50 <HAL_CAN_MspInit+0x84>)
 8000b3c:	f000 fd66 	bl	800160c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000b40:	bf00      	nop
 8000b42:	3728      	adds	r7, #40	; 0x28
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40006400 	.word	0x40006400
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	48000400 	.word	0x48000400

08000b54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08c      	sub	sp, #48	; 0x30
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 031c 	add.w	r3, r7, #28
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a2f      	ldr	r2, [pc, #188]	; (8000c30 <HAL_I2C_MspInit+0xdc>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d128      	bne.n	8000bc8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b76:	4b2f      	ldr	r3, [pc, #188]	; (8000c34 <HAL_I2C_MspInit+0xe0>)
 8000b78:	695b      	ldr	r3, [r3, #20]
 8000b7a:	4a2e      	ldr	r2, [pc, #184]	; (8000c34 <HAL_I2C_MspInit+0xe0>)
 8000b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b80:	6153      	str	r3, [r2, #20]
 8000b82:	4b2c      	ldr	r3, [pc, #176]	; (8000c34 <HAL_I2C_MspInit+0xe0>)
 8000b84:	695b      	ldr	r3, [r3, #20]
 8000b86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b8a:	61bb      	str	r3, [r7, #24]
 8000b8c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b8e:	23c0      	movs	r3, #192	; 0xc0
 8000b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b92:	2312      	movs	r3, #18
 8000b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba2:	f107 031c 	add.w	r3, r7, #28
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4823      	ldr	r0, [pc, #140]	; (8000c38 <HAL_I2C_MspInit+0xe4>)
 8000baa:	f000 fd2f 	bl	800160c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bae:	4b21      	ldr	r3, [pc, #132]	; (8000c34 <HAL_I2C_MspInit+0xe0>)
 8000bb0:	69db      	ldr	r3, [r3, #28]
 8000bb2:	4a20      	ldr	r2, [pc, #128]	; (8000c34 <HAL_I2C_MspInit+0xe0>)
 8000bb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bb8:	61d3      	str	r3, [r2, #28]
 8000bba:	4b1e      	ldr	r3, [pc, #120]	; (8000c34 <HAL_I2C_MspInit+0xe0>)
 8000bbc:	69db      	ldr	r3, [r3, #28]
 8000bbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000bc6:	e02e      	b.n	8000c26 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C2)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a1b      	ldr	r2, [pc, #108]	; (8000c3c <HAL_I2C_MspInit+0xe8>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d129      	bne.n	8000c26 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <HAL_I2C_MspInit+0xe0>)
 8000bd4:	695b      	ldr	r3, [r3, #20]
 8000bd6:	4a17      	ldr	r2, [pc, #92]	; (8000c34 <HAL_I2C_MspInit+0xe0>)
 8000bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bdc:	6153      	str	r3, [r2, #20]
 8000bde:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <HAL_I2C_MspInit+0xe0>)
 8000be0:	695b      	ldr	r3, [r3, #20]
 8000be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf0:	2312      	movs	r3, #18
 8000bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000bfc:	2304      	movs	r3, #4
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c00:	f107 031c 	add.w	r3, r7, #28
 8000c04:	4619      	mov	r1, r3
 8000c06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c0a:	f000 fcff 	bl	800160c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <HAL_I2C_MspInit+0xe0>)
 8000c10:	69db      	ldr	r3, [r3, #28]
 8000c12:	4a08      	ldr	r2, [pc, #32]	; (8000c34 <HAL_I2C_MspInit+0xe0>)
 8000c14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c18:	61d3      	str	r3, [r2, #28]
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_I2C_MspInit+0xe0>)
 8000c1c:	69db      	ldr	r3, [r3, #28]
 8000c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
}
 8000c26:	bf00      	nop
 8000c28:	3730      	adds	r7, #48	; 0x30
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40005400 	.word	0x40005400
 8000c34:	40021000 	.word	0x40021000
 8000c38:	48000400 	.word	0x48000400
 8000c3c:	40005800 	.word	0x40005800

08000c40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	; 0x28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a17      	ldr	r2, [pc, #92]	; (8000cbc <HAL_SPI_MspInit+0x7c>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d128      	bne.n	8000cb4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c62:	4b17      	ldr	r3, [pc, #92]	; (8000cc0 <HAL_SPI_MspInit+0x80>)
 8000c64:	69db      	ldr	r3, [r3, #28]
 8000c66:	4a16      	ldr	r2, [pc, #88]	; (8000cc0 <HAL_SPI_MspInit+0x80>)
 8000c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c6c:	61d3      	str	r3, [r2, #28]
 8000c6e:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <HAL_SPI_MspInit+0x80>)
 8000c70:	69db      	ldr	r3, [r3, #28]
 8000c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <HAL_SPI_MspInit+0x80>)
 8000c7c:	695b      	ldr	r3, [r3, #20]
 8000c7e:	4a10      	ldr	r2, [pc, #64]	; (8000cc0 <HAL_SPI_MspInit+0x80>)
 8000c80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c84:	6153      	str	r3, [r2, #20]
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <HAL_SPI_MspInit+0x80>)
 8000c88:	695b      	ldr	r3, [r3, #20]
 8000c8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000c92:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ca4:	2305      	movs	r3, #5
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4619      	mov	r1, r3
 8000cae:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <HAL_SPI_MspInit+0x84>)
 8000cb0:	f000 fcac 	bl	800160c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000cb4:	bf00      	nop
 8000cb6:	3728      	adds	r7, #40	; 0x28
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40003800 	.word	0x40003800
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	48000400 	.word	0x48000400

08000cc8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08a      	sub	sp, #40	; 0x28
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a17      	ldr	r2, [pc, #92]	; (8000d44 <HAL_TIM_IC_MspInit+0x7c>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d128      	bne.n	8000d3c <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cea:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <HAL_TIM_IC_MspInit+0x80>)
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	4a16      	ldr	r2, [pc, #88]	; (8000d48 <HAL_TIM_IC_MspInit+0x80>)
 8000cf0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cf4:	6193      	str	r3, [r2, #24]
 8000cf6:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <HAL_TIM_IC_MspInit+0x80>)
 8000cf8:	699b      	ldr	r3, [r3, #24]
 8000cfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d02:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <HAL_TIM_IC_MspInit+0x80>)
 8000d04:	695b      	ldr	r3, [r3, #20]
 8000d06:	4a10      	ldr	r2, [pc, #64]	; (8000d48 <HAL_TIM_IC_MspInit+0x80>)
 8000d08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d0c:	6153      	str	r3, [r2, #20]
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <HAL_TIM_IC_MspInit+0x80>)
 8000d10:	695b      	ldr	r3, [r3, #20]
 8000d12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8000d1a:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	4619      	mov	r1, r3
 8000d36:	4805      	ldr	r0, [pc, #20]	; (8000d4c <HAL_TIM_IC_MspInit+0x84>)
 8000d38:	f000 fc68 	bl	800160c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d3c:	bf00      	nop
 8000d3e:	3728      	adds	r7, #40	; 0x28
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40012c00 	.word	0x40012c00
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	48001000 	.word	0x48001000

08000d50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b088      	sub	sp, #32
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 030c 	add.w	r3, r7, #12
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a11      	ldr	r2, [pc, #68]	; (8000db4 <HAL_TIM_MspPostInit+0x64>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d11c      	bne.n	8000dac <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d72:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <HAL_TIM_MspPostInit+0x68>)
 8000d74:	695b      	ldr	r3, [r3, #20]
 8000d76:	4a10      	ldr	r2, [pc, #64]	; (8000db8 <HAL_TIM_MspPostInit+0x68>)
 8000d78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d7c:	6153      	str	r3, [r2, #20]
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <HAL_TIM_MspPostInit+0x68>)
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	68bb      	ldr	r3, [r7, #8]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8000d8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000d8e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d90:	2302      	movs	r3, #2
 8000d92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000da0:	f107 030c 	add.w	r3, r7, #12
 8000da4:	4619      	mov	r1, r3
 8000da6:	4805      	ldr	r0, [pc, #20]	; (8000dbc <HAL_TIM_MspPostInit+0x6c>)
 8000da8:	f000 fc30 	bl	800160c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000dac:	bf00      	nop
 8000dae:	3720      	adds	r7, #32
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40012c00 	.word	0x40012c00
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	48001000 	.word	0x48001000

08000dc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b092      	sub	sp, #72	; 0x48
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a79      	ldr	r2, [pc, #484]	; (8000fc4 <HAL_UART_MspInit+0x204>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d145      	bne.n	8000e6e <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000de2:	4b79      	ldr	r3, [pc, #484]	; (8000fc8 <HAL_UART_MspInit+0x208>)
 8000de4:	69db      	ldr	r3, [r3, #28]
 8000de6:	4a78      	ldr	r2, [pc, #480]	; (8000fc8 <HAL_UART_MspInit+0x208>)
 8000de8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000dec:	61d3      	str	r3, [r2, #28]
 8000dee:	4b76      	ldr	r3, [pc, #472]	; (8000fc8 <HAL_UART_MspInit+0x208>)
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000df6:	633b      	str	r3, [r7, #48]	; 0x30
 8000df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfa:	4b73      	ldr	r3, [pc, #460]	; (8000fc8 <HAL_UART_MspInit+0x208>)
 8000dfc:	695b      	ldr	r3, [r3, #20]
 8000dfe:	4a72      	ldr	r2, [pc, #456]	; (8000fc8 <HAL_UART_MspInit+0x208>)
 8000e00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e04:	6153      	str	r3, [r2, #20]
 8000e06:	4b70      	ldr	r3, [pc, #448]	; (8000fc8 <HAL_UART_MspInit+0x208>)
 8000e08:	695b      	ldr	r3, [r3, #20]
 8000e0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e12:	4b6d      	ldr	r3, [pc, #436]	; (8000fc8 <HAL_UART_MspInit+0x208>)
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	4a6c      	ldr	r2, [pc, #432]	; (8000fc8 <HAL_UART_MspInit+0x208>)
 8000e18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000e1c:	6153      	str	r3, [r2, #20]
 8000e1e:	4b6a      	ldr	r3, [pc, #424]	; (8000fc8 <HAL_UART_MspInit+0x208>)
 8000e20:	695b      	ldr	r3, [r3, #20]
 8000e22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e26:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e2e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e30:	2302      	movs	r3, #2
 8000e32:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8000e3c:	2305      	movs	r3, #5
 8000e3e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e40:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e44:	4619      	mov	r1, r3
 8000e46:	4861      	ldr	r0, [pc, #388]	; (8000fcc <HAL_UART_MspInit+0x20c>)
 8000e48:	f000 fbe0 	bl	800160c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e4c:	2304      	movs	r3, #4
 8000e4e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8000e5c:	2305      	movs	r3, #5
 8000e5e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e60:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e64:	4619      	mov	r1, r3
 8000e66:	485a      	ldr	r0, [pc, #360]	; (8000fd0 <HAL_UART_MspInit+0x210>)
 8000e68:	f000 fbd0 	bl	800160c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e6c:	e0a6      	b.n	8000fbc <HAL_UART_MspInit+0x1fc>
  else if(huart->Instance==USART1)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a58      	ldr	r2, [pc, #352]	; (8000fd4 <HAL_UART_MspInit+0x214>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d128      	bne.n	8000eca <HAL_UART_MspInit+0x10a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e78:	4b53      	ldr	r3, [pc, #332]	; (8000fc8 <HAL_UART_MspInit+0x208>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	4a52      	ldr	r2, [pc, #328]	; (8000fc8 <HAL_UART_MspInit+0x208>)
 8000e7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e82:	6193      	str	r3, [r2, #24]
 8000e84:	4b50      	ldr	r3, [pc, #320]	; (8000fc8 <HAL_UART_MspInit+0x208>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e90:	4b4d      	ldr	r3, [pc, #308]	; (8000fc8 <HAL_UART_MspInit+0x208>)
 8000e92:	695b      	ldr	r3, [r3, #20]
 8000e94:	4a4c      	ldr	r2, [pc, #304]	; (8000fc8 <HAL_UART_MspInit+0x208>)
 8000e96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e9a:	6153      	str	r3, [r2, #20]
 8000e9c:	4b4a      	ldr	r3, [pc, #296]	; (8000fc8 <HAL_UART_MspInit+0x208>)
 8000e9e:	695b      	ldr	r3, [r3, #20]
 8000ea0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ea4:	623b      	str	r3, [r7, #32]
 8000ea6:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000ea8:	2330      	movs	r3, #48	; 0x30
 8000eaa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000eb8:	2307      	movs	r3, #7
 8000eba:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ebc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4842      	ldr	r0, [pc, #264]	; (8000fcc <HAL_UART_MspInit+0x20c>)
 8000ec4:	f000 fba2 	bl	800160c <HAL_GPIO_Init>
}
 8000ec8:	e078      	b.n	8000fbc <HAL_UART_MspInit+0x1fc>
  else if(huart->Instance==USART2)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a42      	ldr	r2, [pc, #264]	; (8000fd8 <HAL_UART_MspInit+0x218>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d128      	bne.n	8000f26 <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ed4:	4b3c      	ldr	r3, [pc, #240]	; (8000fc8 <HAL_UART_MspInit+0x208>)
 8000ed6:	69db      	ldr	r3, [r3, #28]
 8000ed8:	4a3b      	ldr	r2, [pc, #236]	; (8000fc8 <HAL_UART_MspInit+0x208>)
 8000eda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ede:	61d3      	str	r3, [r2, #28]
 8000ee0:	4b39      	ldr	r3, [pc, #228]	; (8000fc8 <HAL_UART_MspInit+0x208>)
 8000ee2:	69db      	ldr	r3, [r3, #28]
 8000ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee8:	61fb      	str	r3, [r7, #28]
 8000eea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eec:	4b36      	ldr	r3, [pc, #216]	; (8000fc8 <HAL_UART_MspInit+0x208>)
 8000eee:	695b      	ldr	r3, [r3, #20]
 8000ef0:	4a35      	ldr	r2, [pc, #212]	; (8000fc8 <HAL_UART_MspInit+0x208>)
 8000ef2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ef6:	6153      	str	r3, [r2, #20]
 8000ef8:	4b33      	ldr	r3, [pc, #204]	; (8000fc8 <HAL_UART_MspInit+0x208>)
 8000efa:	695b      	ldr	r3, [r3, #20]
 8000efc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f00:	61bb      	str	r3, [r7, #24]
 8000f02:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000f04:	2360      	movs	r3, #96	; 0x60
 8000f06:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f10:	2303      	movs	r3, #3
 8000f12:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f14:	2307      	movs	r3, #7
 8000f16:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	482c      	ldr	r0, [pc, #176]	; (8000fd0 <HAL_UART_MspInit+0x210>)
 8000f20:	f000 fb74 	bl	800160c <HAL_GPIO_Init>
}
 8000f24:	e04a      	b.n	8000fbc <HAL_UART_MspInit+0x1fc>
  else if(huart->Instance==USART3)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a2c      	ldr	r2, [pc, #176]	; (8000fdc <HAL_UART_MspInit+0x21c>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d145      	bne.n	8000fbc <HAL_UART_MspInit+0x1fc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f30:	4b25      	ldr	r3, [pc, #148]	; (8000fc8 <HAL_UART_MspInit+0x208>)
 8000f32:	69db      	ldr	r3, [r3, #28]
 8000f34:	4a24      	ldr	r2, [pc, #144]	; (8000fc8 <HAL_UART_MspInit+0x208>)
 8000f36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f3a:	61d3      	str	r3, [r2, #28]
 8000f3c:	4b22      	ldr	r3, [pc, #136]	; (8000fc8 <HAL_UART_MspInit+0x208>)
 8000f3e:	69db      	ldr	r3, [r3, #28]
 8000f40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f44:	617b      	str	r3, [r7, #20]
 8000f46:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f48:	4b1f      	ldr	r3, [pc, #124]	; (8000fc8 <HAL_UART_MspInit+0x208>)
 8000f4a:	695b      	ldr	r3, [r3, #20]
 8000f4c:	4a1e      	ldr	r2, [pc, #120]	; (8000fc8 <HAL_UART_MspInit+0x208>)
 8000f4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f52:	6153      	str	r3, [r2, #20]
 8000f54:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <HAL_UART_MspInit+0x208>)
 8000f56:	695b      	ldr	r3, [r3, #20]
 8000f58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f5c:	613b      	str	r3, [r7, #16]
 8000f5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f60:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <HAL_UART_MspInit+0x208>)
 8000f62:	695b      	ldr	r3, [r3, #20]
 8000f64:	4a18      	ldr	r2, [pc, #96]	; (8000fc8 <HAL_UART_MspInit+0x208>)
 8000f66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f6a:	6153      	str	r3, [r2, #20]
 8000f6c:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <HAL_UART_MspInit+0x208>)
 8000f6e:	695b      	ldr	r3, [r3, #20]
 8000f70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f7c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f86:	2303      	movs	r3, #3
 8000f88:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f8a:	2307      	movs	r3, #7
 8000f8c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f8e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f92:	4619      	mov	r1, r3
 8000f94:	480e      	ldr	r0, [pc, #56]	; (8000fd0 <HAL_UART_MspInit+0x210>)
 8000f96:	f000 fb39 	bl	800160c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f9a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f9e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fac:	2307      	movs	r3, #7
 8000fae:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4805      	ldr	r0, [pc, #20]	; (8000fcc <HAL_UART_MspInit+0x20c>)
 8000fb8:	f000 fb28 	bl	800160c <HAL_GPIO_Init>
}
 8000fbc:	bf00      	nop
 8000fbe:	3748      	adds	r7, #72	; 0x48
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40005000 	.word	0x40005000
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	48000800 	.word	0x48000800
 8000fd0:	48000c00 	.word	0x48000c00
 8000fd4:	40013800 	.word	0x40013800
 8000fd8:	40004400 	.word	0x40004400
 8000fdc:	40004800 	.word	0x40004800

08000fe0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	; 0x28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a18      	ldr	r2, [pc, #96]	; (8001060 <HAL_PCD_MspInit+0x80>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d129      	bne.n	8001056 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001002:	4b18      	ldr	r3, [pc, #96]	; (8001064 <HAL_PCD_MspInit+0x84>)
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	4a17      	ldr	r2, [pc, #92]	; (8001064 <HAL_PCD_MspInit+0x84>)
 8001008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800100c:	6153      	str	r3, [r2, #20]
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <HAL_PCD_MspInit+0x84>)
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800101a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800101e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001020:	2302      	movs	r3, #2
 8001022:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001028:	2303      	movs	r3, #3
 800102a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800102c:	230e      	movs	r3, #14
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	4619      	mov	r1, r3
 8001036:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103a:	f000 fae7 	bl	800160c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <HAL_PCD_MspInit+0x84>)
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	4a08      	ldr	r2, [pc, #32]	; (8001064 <HAL_PCD_MspInit+0x84>)
 8001044:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001048:	61d3      	str	r3, [r2, #28]
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_PCD_MspInit+0x84>)
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001056:	bf00      	nop
 8001058:	3728      	adds	r7, #40	; 0x28
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40005c00 	.word	0x40005c00
 8001064:	40021000 	.word	0x40021000

08001068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800106c:	e7fe      	b.n	800106c <NMI_Handler+0x4>

0800106e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001072:	e7fe      	b.n	8001072 <HardFault_Handler+0x4>

08001074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <MemManage_Handler+0x4>

0800107a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800107e:	e7fe      	b.n	800107e <BusFault_Handler+0x4>

08001080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001084:	e7fe      	b.n	8001084 <UsageFault_Handler+0x4>

08001086 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b4:	f000 f884 	bl	80011c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}

080010bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <SystemInit+0x20>)
 80010c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010c6:	4a05      	ldr	r2, [pc, #20]	; (80010dc <SystemInit+0x20>)
 80010c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001118 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80010e4:	f7ff ffea 	bl	80010bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010e8:	480c      	ldr	r0, [pc, #48]	; (800111c <LoopForever+0x6>)
  ldr r1, =_edata
 80010ea:	490d      	ldr	r1, [pc, #52]	; (8001120 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010ec:	4a0d      	ldr	r2, [pc, #52]	; (8001124 <LoopForever+0xe>)
  movs r3, #0
 80010ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f0:	e002      	b.n	80010f8 <LoopCopyDataInit>

080010f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010f6:	3304      	adds	r3, #4

080010f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010fc:	d3f9      	bcc.n	80010f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010fe:	4a0a      	ldr	r2, [pc, #40]	; (8001128 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001100:	4c0a      	ldr	r4, [pc, #40]	; (800112c <LoopForever+0x16>)
  movs r3, #0
 8001102:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001104:	e001      	b.n	800110a <LoopFillZerobss>

08001106 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001106:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001108:	3204      	adds	r2, #4

0800110a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800110a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800110c:	d3fb      	bcc.n	8001106 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800110e:	f003 fe95 	bl	8004e3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001112:	f7ff f897 	bl	8000244 <main>

08001116 <LoopForever>:

LoopForever:
    b LoopForever
 8001116:	e7fe      	b.n	8001116 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001118:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800111c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001120:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001124:	08004edc 	.word	0x08004edc
  ldr r2, =_sbss
 8001128:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800112c:	200006b8 	.word	0x200006b8

08001130 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001130:	e7fe      	b.n	8001130 <ADC1_2_IRQHandler>
	...

08001134 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <HAL_Init+0x28>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a07      	ldr	r2, [pc, #28]	; (800115c <HAL_Init+0x28>)
 800113e:	f043 0310 	orr.w	r3, r3, #16
 8001142:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001144:	2003      	movs	r0, #3
 8001146:	f000 fa2d 	bl	80015a4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800114a:	200f      	movs	r0, #15
 800114c:	f000 f808 	bl	8001160 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001150:	f7ff fc98 	bl	8000a84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40022000 	.word	0x40022000

08001160 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001168:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <HAL_InitTick+0x54>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <HAL_InitTick+0x58>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	4619      	mov	r1, r3
 8001172:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001176:	fbb3 f3f1 	udiv	r3, r3, r1
 800117a:	fbb2 f3f3 	udiv	r3, r2, r3
 800117e:	4618      	mov	r0, r3
 8001180:	f000 fa37 	bl	80015f2 <HAL_SYSTICK_Config>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e00e      	b.n	80011ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b0f      	cmp	r3, #15
 8001192:	d80a      	bhi.n	80011aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001194:	2200      	movs	r2, #0
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800119c:	f000 fa0d 	bl	80015ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011a0:	4a06      	ldr	r2, [pc, #24]	; (80011bc <HAL_InitTick+0x5c>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80011a6:	2300      	movs	r3, #0
 80011a8:	e000      	b.n	80011ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000000 	.word	0x20000000
 80011b8:	20000008 	.word	0x20000008
 80011bc:	20000004 	.word	0x20000004

080011c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <HAL_IncTick+0x20>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_IncTick+0x24>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4413      	add	r3, r2
 80011d0:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <HAL_IncTick+0x24>)
 80011d2:	6013      	str	r3, [r2, #0]
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	20000008 	.word	0x20000008
 80011e4:	200006b4 	.word	0x200006b4

080011e8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return uwTick;  
 80011ec:	4b03      	ldr	r3, [pc, #12]	; (80011fc <HAL_GetTick+0x14>)
 80011ee:	681b      	ldr	r3, [r3, #0]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	200006b4 	.word	0x200006b4

08001200 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001208:	f7ff ffee 	bl	80011e8 <HAL_GetTick>
 800120c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001218:	d005      	beq.n	8001226 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800121a:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <HAL_Delay+0x44>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	461a      	mov	r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4413      	add	r3, r2
 8001224:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001226:	bf00      	nop
 8001228:	f7ff ffde 	bl	80011e8 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	429a      	cmp	r2, r3
 8001236:	d8f7      	bhi.n	8001228 <HAL_Delay+0x28>
  {
  }
}
 8001238:	bf00      	nop
 800123a:	bf00      	nop
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000008 	.word	0x20000008

08001248 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d101      	bne.n	800125a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e0ed      	b.n	8001436 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b00      	cmp	r3, #0
 8001264:	d102      	bne.n	800126c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff fc30 	bl	8000acc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f042 0201 	orr.w	r2, r2, #1
 800127a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800127c:	f7ff ffb4 	bl	80011e8 <HAL_GetTick>
 8001280:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001282:	e012      	b.n	80012aa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001284:	f7ff ffb0 	bl	80011e8 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b0a      	cmp	r3, #10
 8001290:	d90b      	bls.n	80012aa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001296:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2205      	movs	r2, #5
 80012a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e0c5      	b.n	8001436 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d0e5      	beq.n	8001284 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f022 0202 	bic.w	r2, r2, #2
 80012c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012c8:	f7ff ff8e 	bl	80011e8 <HAL_GetTick>
 80012cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012ce:	e012      	b.n	80012f6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012d0:	f7ff ff8a 	bl	80011e8 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b0a      	cmp	r3, #10
 80012dc:	d90b      	bls.n	80012f6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2205      	movs	r2, #5
 80012ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e09f      	b.n	8001436 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d1e5      	bne.n	80012d0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	7e1b      	ldrb	r3, [r3, #24]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d108      	bne.n	800131e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	e007      	b.n	800132e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800132c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	7e5b      	ldrb	r3, [r3, #25]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d108      	bne.n	8001348 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	e007      	b.n	8001358 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001356:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	7e9b      	ldrb	r3, [r3, #26]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d108      	bne.n	8001372 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f042 0220 	orr.w	r2, r2, #32
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	e007      	b.n	8001382 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 0220 	bic.w	r2, r2, #32
 8001380:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	7edb      	ldrb	r3, [r3, #27]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d108      	bne.n	800139c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f022 0210 	bic.w	r2, r2, #16
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	e007      	b.n	80013ac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f042 0210 	orr.w	r2, r2, #16
 80013aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	7f1b      	ldrb	r3, [r3, #28]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d108      	bne.n	80013c6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f042 0208 	orr.w	r2, r2, #8
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	e007      	b.n	80013d6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f022 0208 	bic.w	r2, r2, #8
 80013d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	7f5b      	ldrb	r3, [r3, #29]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d108      	bne.n	80013f0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f042 0204 	orr.w	r2, r2, #4
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	e007      	b.n	8001400 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 0204 	bic.w	r2, r2, #4
 80013fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	431a      	orrs	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	691b      	ldr	r3, [r3, #16]
 800140e:	431a      	orrs	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	695b      	ldr	r3, [r3, #20]
 8001414:	ea42 0103 	orr.w	r1, r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	1e5a      	subs	r2, r3, #1
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2201      	movs	r2, #1
 8001430:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <__NVIC_SetPriorityGrouping+0x44>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800145c:	4013      	ands	r3, r2
 800145e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001468:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800146c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001472:	4a04      	ldr	r2, [pc, #16]	; (8001484 <__NVIC_SetPriorityGrouping+0x44>)
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	60d3      	str	r3, [r2, #12]
}
 8001478:	bf00      	nop
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800148c:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <__NVIC_GetPriorityGrouping+0x18>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	0a1b      	lsrs	r3, r3, #8
 8001492:	f003 0307 	and.w	r3, r3, #7
}
 8001496:	4618      	mov	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	6039      	str	r1, [r7, #0]
 80014ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	db0a      	blt.n	80014ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	490c      	ldr	r1, [pc, #48]	; (80014f0 <__NVIC_SetPriority+0x4c>)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	0112      	lsls	r2, r2, #4
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	440b      	add	r3, r1
 80014c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014cc:	e00a      	b.n	80014e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	4908      	ldr	r1, [pc, #32]	; (80014f4 <__NVIC_SetPriority+0x50>)
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	f003 030f 	and.w	r3, r3, #15
 80014da:	3b04      	subs	r3, #4
 80014dc:	0112      	lsls	r2, r2, #4
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	440b      	add	r3, r1
 80014e2:	761a      	strb	r2, [r3, #24]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000e100 	.word	0xe000e100
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b089      	sub	sp, #36	; 0x24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f1c3 0307 	rsb	r3, r3, #7
 8001512:	2b04      	cmp	r3, #4
 8001514:	bf28      	it	cs
 8001516:	2304      	movcs	r3, #4
 8001518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3304      	adds	r3, #4
 800151e:	2b06      	cmp	r3, #6
 8001520:	d902      	bls.n	8001528 <NVIC_EncodePriority+0x30>
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3b03      	subs	r3, #3
 8001526:	e000      	b.n	800152a <NVIC_EncodePriority+0x32>
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43da      	mvns	r2, r3
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	401a      	ands	r2, r3
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001540:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	fa01 f303 	lsl.w	r3, r1, r3
 800154a:	43d9      	mvns	r1, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001550:	4313      	orrs	r3, r2
         );
}
 8001552:	4618      	mov	r0, r3
 8001554:	3724      	adds	r7, #36	; 0x24
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
	...

08001560 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3b01      	subs	r3, #1
 800156c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001570:	d301      	bcc.n	8001576 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001572:	2301      	movs	r3, #1
 8001574:	e00f      	b.n	8001596 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001576:	4a0a      	ldr	r2, [pc, #40]	; (80015a0 <SysTick_Config+0x40>)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3b01      	subs	r3, #1
 800157c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800157e:	210f      	movs	r1, #15
 8001580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001584:	f7ff ff8e 	bl	80014a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001588:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <SysTick_Config+0x40>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800158e:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <SysTick_Config+0x40>)
 8001590:	2207      	movs	r2, #7
 8001592:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	e000e010 	.word	0xe000e010

080015a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff ff47 	bl	8001440 <__NVIC_SetPriorityGrouping>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b086      	sub	sp, #24
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	60b9      	str	r1, [r7, #8]
 80015c4:	607a      	str	r2, [r7, #4]
 80015c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015cc:	f7ff ff5c 	bl	8001488 <__NVIC_GetPriorityGrouping>
 80015d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	68b9      	ldr	r1, [r7, #8]
 80015d6:	6978      	ldr	r0, [r7, #20]
 80015d8:	f7ff ff8e 	bl	80014f8 <NVIC_EncodePriority>
 80015dc:	4602      	mov	r2, r0
 80015de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e2:	4611      	mov	r1, r2
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ff5d 	bl	80014a4 <__NVIC_SetPriority>
}
 80015ea:	bf00      	nop
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff ffb0 	bl	8001560 <SysTick_Config>
 8001600:	4603      	mov	r3, r0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800160c:	b480      	push	{r7}
 800160e:	b087      	sub	sp, #28
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800161a:	e154      	b.n	80018c6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	2101      	movs	r1, #1
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	fa01 f303 	lsl.w	r3, r1, r3
 8001628:	4013      	ands	r3, r2
 800162a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2b00      	cmp	r3, #0
 8001630:	f000 8146 	beq.w	80018c0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f003 0303 	and.w	r3, r3, #3
 800163c:	2b01      	cmp	r3, #1
 800163e:	d005      	beq.n	800164c <HAL_GPIO_Init+0x40>
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 0303 	and.w	r3, r3, #3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d130      	bne.n	80016ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	2203      	movs	r2, #3
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	4013      	ands	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	68da      	ldr	r2, [r3, #12]
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	4313      	orrs	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001682:	2201      	movs	r2, #1
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43db      	mvns	r3, r3
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	4013      	ands	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	091b      	lsrs	r3, r3, #4
 8001698:	f003 0201 	and.w	r2, r3, #1
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f003 0303 	and.w	r3, r3, #3
 80016b6:	2b03      	cmp	r3, #3
 80016b8:	d017      	beq.n	80016ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	2203      	movs	r2, #3
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43db      	mvns	r3, r3
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	4013      	ands	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f003 0303 	and.w	r3, r3, #3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d123      	bne.n	800173e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	08da      	lsrs	r2, r3, #3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	3208      	adds	r2, #8
 80016fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001702:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	220f      	movs	r2, #15
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4013      	ands	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	691a      	ldr	r2, [r3, #16]
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	f003 0307 	and.w	r3, r3, #7
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4313      	orrs	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	08da      	lsrs	r2, r3, #3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3208      	adds	r2, #8
 8001738:	6939      	ldr	r1, [r7, #16]
 800173a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	2203      	movs	r2, #3
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43db      	mvns	r3, r3
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	4013      	ands	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f003 0203 	and.w	r2, r3, #3
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	4313      	orrs	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800177a:	2b00      	cmp	r3, #0
 800177c:	f000 80a0 	beq.w	80018c0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001780:	4b58      	ldr	r3, [pc, #352]	; (80018e4 <HAL_GPIO_Init+0x2d8>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	4a57      	ldr	r2, [pc, #348]	; (80018e4 <HAL_GPIO_Init+0x2d8>)
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	6193      	str	r3, [r2, #24]
 800178c:	4b55      	ldr	r3, [pc, #340]	; (80018e4 <HAL_GPIO_Init+0x2d8>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001798:	4a53      	ldr	r2, [pc, #332]	; (80018e8 <HAL_GPIO_Init+0x2dc>)
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	089b      	lsrs	r3, r3, #2
 800179e:	3302      	adds	r3, #2
 80017a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	f003 0303 	and.w	r3, r3, #3
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	220f      	movs	r2, #15
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	4013      	ands	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017c2:	d019      	beq.n	80017f8 <HAL_GPIO_Init+0x1ec>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a49      	ldr	r2, [pc, #292]	; (80018ec <HAL_GPIO_Init+0x2e0>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d013      	beq.n	80017f4 <HAL_GPIO_Init+0x1e8>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4a48      	ldr	r2, [pc, #288]	; (80018f0 <HAL_GPIO_Init+0x2e4>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d00d      	beq.n	80017f0 <HAL_GPIO_Init+0x1e4>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4a47      	ldr	r2, [pc, #284]	; (80018f4 <HAL_GPIO_Init+0x2e8>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d007      	beq.n	80017ec <HAL_GPIO_Init+0x1e0>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4a46      	ldr	r2, [pc, #280]	; (80018f8 <HAL_GPIO_Init+0x2ec>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d101      	bne.n	80017e8 <HAL_GPIO_Init+0x1dc>
 80017e4:	2304      	movs	r3, #4
 80017e6:	e008      	b.n	80017fa <HAL_GPIO_Init+0x1ee>
 80017e8:	2305      	movs	r3, #5
 80017ea:	e006      	b.n	80017fa <HAL_GPIO_Init+0x1ee>
 80017ec:	2303      	movs	r3, #3
 80017ee:	e004      	b.n	80017fa <HAL_GPIO_Init+0x1ee>
 80017f0:	2302      	movs	r3, #2
 80017f2:	e002      	b.n	80017fa <HAL_GPIO_Init+0x1ee>
 80017f4:	2301      	movs	r3, #1
 80017f6:	e000      	b.n	80017fa <HAL_GPIO_Init+0x1ee>
 80017f8:	2300      	movs	r3, #0
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	f002 0203 	and.w	r2, r2, #3
 8001800:	0092      	lsls	r2, r2, #2
 8001802:	4093      	lsls	r3, r2
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	4313      	orrs	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800180a:	4937      	ldr	r1, [pc, #220]	; (80018e8 <HAL_GPIO_Init+0x2dc>)
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	089b      	lsrs	r3, r3, #2
 8001810:	3302      	adds	r3, #2
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001818:	4b38      	ldr	r3, [pc, #224]	; (80018fc <HAL_GPIO_Init+0x2f0>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	43db      	mvns	r3, r3
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	4013      	ands	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d003      	beq.n	800183c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	4313      	orrs	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800183c:	4a2f      	ldr	r2, [pc, #188]	; (80018fc <HAL_GPIO_Init+0x2f0>)
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001842:	4b2e      	ldr	r3, [pc, #184]	; (80018fc <HAL_GPIO_Init+0x2f0>)
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	43db      	mvns	r3, r3
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	4013      	ands	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	4313      	orrs	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001866:	4a25      	ldr	r2, [pc, #148]	; (80018fc <HAL_GPIO_Init+0x2f0>)
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800186c:	4b23      	ldr	r3, [pc, #140]	; (80018fc <HAL_GPIO_Init+0x2f0>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	43db      	mvns	r3, r3
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	4013      	ands	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	4313      	orrs	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001890:	4a1a      	ldr	r2, [pc, #104]	; (80018fc <HAL_GPIO_Init+0x2f0>)
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001896:	4b19      	ldr	r3, [pc, #100]	; (80018fc <HAL_GPIO_Init+0x2f0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	43db      	mvns	r3, r3
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	4013      	ands	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018ba:	4a10      	ldr	r2, [pc, #64]	; (80018fc <HAL_GPIO_Init+0x2f0>)
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	3301      	adds	r3, #1
 80018c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	fa22 f303 	lsr.w	r3, r2, r3
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f47f aea3 	bne.w	800161c <HAL_GPIO_Init+0x10>
  }
}
 80018d6:	bf00      	nop
 80018d8:	bf00      	nop
 80018da:	371c      	adds	r7, #28
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40010000 	.word	0x40010000
 80018ec:	48000400 	.word	0x48000400
 80018f0:	48000800 	.word	0x48000800
 80018f4:	48000c00 	.word	0x48000c00
 80018f8:	48001000 	.word	0x48001000
 80018fc:	40010400 	.word	0x40010400

08001900 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	807b      	strh	r3, [r7, #2]
 800190c:	4613      	mov	r3, r2
 800190e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001910:	787b      	ldrb	r3, [r7, #1]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001916:	887a      	ldrh	r2, [r7, #2]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800191c:	e002      	b.n	8001924 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800191e:	887a      	ldrh	r2, [r7, #2]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e081      	b.n	8001a46 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b00      	cmp	r3, #0
 800194c:	d106      	bne.n	800195c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7ff f8fc 	bl	8000b54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2224      	movs	r2, #36	; 0x24
 8001960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f022 0201 	bic.w	r2, r2, #1
 8001972:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685a      	ldr	r2, [r3, #4]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001980:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001990:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d107      	bne.n	80019aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	689a      	ldr	r2, [r3, #8]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	e006      	b.n	80019b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80019b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d104      	bne.n	80019ca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	6812      	ldr	r2, [r2, #0]
 80019d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68da      	ldr	r2, [r3, #12]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	691a      	ldr	r2, [r3, #16]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	430a      	orrs	r2, r1
 8001a06:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	69d9      	ldr	r1, [r3, #28]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a1a      	ldr	r2, [r3, #32]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	430a      	orrs	r2, r1
 8001a16:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f042 0201 	orr.w	r2, r2, #1
 8001a26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2220      	movs	r2, #32
 8001a32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
 8001a56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b20      	cmp	r3, #32
 8001a62:	d138      	bne.n	8001ad6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d101      	bne.n	8001a72 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a6e:	2302      	movs	r3, #2
 8001a70:	e032      	b.n	8001ad8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2224      	movs	r2, #36	; 0x24
 8001a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f022 0201 	bic.w	r2, r2, #1
 8001a90:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001aa0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6819      	ldr	r1, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f042 0201 	orr.w	r2, r2, #1
 8001ac0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2220      	movs	r2, #32
 8001ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	e000      	b.n	8001ad8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ad6:	2302      	movs	r3, #2
  }
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b20      	cmp	r3, #32
 8001af8:	d139      	bne.n	8001b6e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d101      	bne.n	8001b08 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b04:	2302      	movs	r3, #2
 8001b06:	e033      	b.n	8001b70 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2224      	movs	r2, #36	; 0x24
 8001b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 0201 	bic.w	r2, r2, #1
 8001b26:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b36:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	021b      	lsls	r3, r3, #8
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f042 0201 	orr.w	r2, r2, #1
 8001b58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2220      	movs	r2, #32
 8001b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e000      	b.n	8001b70 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b6e:	2302      	movs	r3, #2
  }
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b7e:	b08b      	sub	sp, #44	; 0x2c
 8001b80:	af06      	add	r7, sp, #24
 8001b82:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e0c4      	b.n	8001d18 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d106      	bne.n	8001ba8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff fa1c 	bl	8000fe0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2203      	movs	r2, #3
 8001bac:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f003 f8fd 	bl	8004db4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bba:	2300      	movs	r3, #0
 8001bbc:	73fb      	strb	r3, [r7, #15]
 8001bbe:	e040      	b.n	8001c42 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	1c5a      	adds	r2, r3, #1
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	440b      	add	r3, r1
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
 8001bd8:	6879      	ldr	r1, [r7, #4]
 8001bda:	1c5a      	adds	r2, r3, #1
 8001bdc:	4613      	mov	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	440b      	add	r3, r1
 8001be6:	7bfa      	ldrb	r2, [r7, #15]
 8001be8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
 8001bec:	6879      	ldr	r1, [r7, #4]
 8001bee:	1c5a      	adds	r2, r3, #1
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	440b      	add	r3, r1
 8001bfa:	3303      	adds	r3, #3
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c00:	7bfa      	ldrb	r2, [r7, #15]
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	440b      	add	r3, r1
 8001c0e:	3338      	adds	r3, #56	; 0x38
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c14:	7bfa      	ldrb	r2, [r7, #15]
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	440b      	add	r3, r1
 8001c22:	333c      	adds	r3, #60	; 0x3c
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c28:	7bfa      	ldrb	r2, [r7, #15]
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	440b      	add	r3, r1
 8001c36:	3340      	adds	r3, #64	; 0x40
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c3c:	7bfb      	ldrb	r3, [r7, #15]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	73fb      	strb	r3, [r7, #15]
 8001c42:	7bfa      	ldrb	r2, [r7, #15]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d3b9      	bcc.n	8001bc0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	73fb      	strb	r3, [r7, #15]
 8001c50:	e044      	b.n	8001cdc <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c52:	7bfa      	ldrb	r2, [r7, #15]
 8001c54:	6879      	ldr	r1, [r7, #4]
 8001c56:	4613      	mov	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	440b      	add	r3, r1
 8001c60:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001c64:	2200      	movs	r2, #0
 8001c66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c68:	7bfa      	ldrb	r2, [r7, #15]
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	440b      	add	r3, r1
 8001c76:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c7a:	7bfa      	ldrb	r2, [r7, #15]
 8001c7c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c7e:	7bfa      	ldrb	r2, [r7, #15]
 8001c80:	6879      	ldr	r1, [r7, #4]
 8001c82:	4613      	mov	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	440b      	add	r3, r1
 8001c8c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001c90:	2200      	movs	r2, #0
 8001c92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c94:	7bfa      	ldrb	r2, [r7, #15]
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	440b      	add	r3, r1
 8001ca2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001caa:	7bfa      	ldrb	r2, [r7, #15]
 8001cac:	6879      	ldr	r1, [r7, #4]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	440b      	add	r3, r1
 8001cb8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cc0:	7bfa      	ldrb	r2, [r7, #15]
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	440b      	add	r3, r1
 8001cce:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	73fb      	strb	r3, [r7, #15]
 8001cdc:	7bfa      	ldrb	r2, [r7, #15]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d3b5      	bcc.n	8001c52 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	603b      	str	r3, [r7, #0]
 8001cec:	687e      	ldr	r6, [r7, #4]
 8001cee:	466d      	mov	r5, sp
 8001cf0:	f106 0410 	add.w	r4, r6, #16
 8001cf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cf8:	6823      	ldr	r3, [r4, #0]
 8001cfa:	602b      	str	r3, [r5, #0]
 8001cfc:	1d33      	adds	r3, r6, #4
 8001cfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d00:	6838      	ldr	r0, [r7, #0]
 8001d02:	f003 f872 	bl	8004dea <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d30:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d102      	bne.n	8001d46 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	f001 b823 	b.w	8002d8c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f000 817d 	beq.w	8002056 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d5c:	4bbc      	ldr	r3, [pc, #752]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 030c 	and.w	r3, r3, #12
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d00c      	beq.n	8001d82 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d68:	4bb9      	ldr	r3, [pc, #740]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 030c 	and.w	r3, r3, #12
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	d15c      	bne.n	8001e2e <HAL_RCC_OscConfig+0x10e>
 8001d74:	4bb6      	ldr	r3, [pc, #728]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d80:	d155      	bne.n	8001e2e <HAL_RCC_OscConfig+0x10e>
 8001d82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d86:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001d8e:	fa93 f3a3 	rbit	r3, r3
 8001d92:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d96:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d9a:	fab3 f383 	clz	r3, r3
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	095b      	lsrs	r3, r3, #5
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d102      	bne.n	8001db4 <HAL_RCC_OscConfig+0x94>
 8001dae:	4ba8      	ldr	r3, [pc, #672]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	e015      	b.n	8001de0 <HAL_RCC_OscConfig+0xc0>
 8001db4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001db8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001dc0:	fa93 f3a3 	rbit	r3, r3
 8001dc4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001dc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dcc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001dd0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001dd4:	fa93 f3a3 	rbit	r3, r3
 8001dd8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001ddc:	4b9c      	ldr	r3, [pc, #624]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001de4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001de8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001dec:	fa92 f2a2 	rbit	r2, r2
 8001df0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001df4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001df8:	fab2 f282 	clz	r2, r2
 8001dfc:	b2d2      	uxtb	r2, r2
 8001dfe:	f042 0220 	orr.w	r2, r2, #32
 8001e02:	b2d2      	uxtb	r2, r2
 8001e04:	f002 021f 	and.w	r2, r2, #31
 8001e08:	2101      	movs	r1, #1
 8001e0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e0e:	4013      	ands	r3, r2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 811f 	beq.w	8002054 <HAL_RCC_OscConfig+0x334>
 8001e16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f040 8116 	bne.w	8002054 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	f000 bfaf 	b.w	8002d8c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e3e:	d106      	bne.n	8001e4e <HAL_RCC_OscConfig+0x12e>
 8001e40:	4b83      	ldr	r3, [pc, #524]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a82      	ldr	r2, [pc, #520]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e4a:	6013      	str	r3, [r2, #0]
 8001e4c:	e036      	b.n	8001ebc <HAL_RCC_OscConfig+0x19c>
 8001e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10c      	bne.n	8001e78 <HAL_RCC_OscConfig+0x158>
 8001e5e:	4b7c      	ldr	r3, [pc, #496]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a7b      	ldr	r2, [pc, #492]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001e64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	4b79      	ldr	r3, [pc, #484]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a78      	ldr	r2, [pc, #480]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001e70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e74:	6013      	str	r3, [r2, #0]
 8001e76:	e021      	b.n	8001ebc <HAL_RCC_OscConfig+0x19c>
 8001e78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e88:	d10c      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x184>
 8001e8a:	4b71      	ldr	r3, [pc, #452]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a70      	ldr	r2, [pc, #448]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001e90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	4b6e      	ldr	r3, [pc, #440]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a6d      	ldr	r2, [pc, #436]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	e00b      	b.n	8001ebc <HAL_RCC_OscConfig+0x19c>
 8001ea4:	4b6a      	ldr	r3, [pc, #424]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a69      	ldr	r2, [pc, #420]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eae:	6013      	str	r3, [r2, #0]
 8001eb0:	4b67      	ldr	r3, [pc, #412]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a66      	ldr	r2, [pc, #408]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eba:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ebc:	4b64      	ldr	r3, [pc, #400]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec0:	f023 020f 	bic.w	r2, r3, #15
 8001ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	495f      	ldr	r1, [pc, #380]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ed6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d059      	beq.n	8001f9a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee6:	f7ff f97f 	bl	80011e8 <HAL_GetTick>
 8001eea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eee:	e00a      	b.n	8001f06 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ef0:	f7ff f97a 	bl	80011e8 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b64      	cmp	r3, #100	; 0x64
 8001efe:	d902      	bls.n	8001f06 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	f000 bf43 	b.w	8002d8c <HAL_RCC_OscConfig+0x106c>
 8001f06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f0a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001f12:	fa93 f3a3 	rbit	r3, r3
 8001f16:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001f1a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1e:	fab3 f383 	clz	r3, r3
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	095b      	lsrs	r3, r3, #5
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d102      	bne.n	8001f38 <HAL_RCC_OscConfig+0x218>
 8001f32:	4b47      	ldr	r3, [pc, #284]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	e015      	b.n	8001f64 <HAL_RCC_OscConfig+0x244>
 8001f38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f3c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f40:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001f44:	fa93 f3a3 	rbit	r3, r3
 8001f48:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001f4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f50:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001f54:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001f58:	fa93 f3a3 	rbit	r3, r3
 8001f5c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001f60:	4b3b      	ldr	r3, [pc, #236]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f68:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001f6c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001f70:	fa92 f2a2 	rbit	r2, r2
 8001f74:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001f78:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001f7c:	fab2 f282 	clz	r2, r2
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	f042 0220 	orr.w	r2, r2, #32
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	f002 021f 	and.w	r2, r2, #31
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f92:	4013      	ands	r3, r2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0ab      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x1d0>
 8001f98:	e05d      	b.n	8002056 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9a:	f7ff f925 	bl	80011e8 <HAL_GetTick>
 8001f9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa2:	e00a      	b.n	8001fba <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fa4:	f7ff f920 	bl	80011e8 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b64      	cmp	r3, #100	; 0x64
 8001fb2:	d902      	bls.n	8001fba <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	f000 bee9 	b.w	8002d8c <HAL_RCC_OscConfig+0x106c>
 8001fba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fbe:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001fc6:	fa93 f3a3 	rbit	r3, r3
 8001fca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001fce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fd2:	fab3 f383 	clz	r3, r3
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	095b      	lsrs	r3, r3, #5
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d102      	bne.n	8001fec <HAL_RCC_OscConfig+0x2cc>
 8001fe6:	4b1a      	ldr	r3, [pc, #104]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	e015      	b.n	8002018 <HAL_RCC_OscConfig+0x2f8>
 8001fec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ff0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001ff8:	fa93 f3a3 	rbit	r3, r3
 8001ffc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002000:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002004:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002008:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800200c:	fa93 f3a3 	rbit	r3, r3
 8002010:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002014:	4b0e      	ldr	r3, [pc, #56]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002018:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800201c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002020:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002024:	fa92 f2a2 	rbit	r2, r2
 8002028:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800202c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002030:	fab2 f282 	clz	r2, r2
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	f042 0220 	orr.w	r2, r2, #32
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	f002 021f 	and.w	r2, r2, #31
 8002040:	2101      	movs	r1, #1
 8002042:	fa01 f202 	lsl.w	r2, r1, r2
 8002046:	4013      	ands	r3, r2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1ab      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x284>
 800204c:	e003      	b.n	8002056 <HAL_RCC_OscConfig+0x336>
 800204e:	bf00      	nop
 8002050:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002054:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800205a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 817d 	beq.w	8002366 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800206c:	4ba6      	ldr	r3, [pc, #664]	; (8002308 <HAL_RCC_OscConfig+0x5e8>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 030c 	and.w	r3, r3, #12
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00b      	beq.n	8002090 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002078:	4ba3      	ldr	r3, [pc, #652]	; (8002308 <HAL_RCC_OscConfig+0x5e8>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 030c 	and.w	r3, r3, #12
 8002080:	2b08      	cmp	r3, #8
 8002082:	d172      	bne.n	800216a <HAL_RCC_OscConfig+0x44a>
 8002084:	4ba0      	ldr	r3, [pc, #640]	; (8002308 <HAL_RCC_OscConfig+0x5e8>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d16c      	bne.n	800216a <HAL_RCC_OscConfig+0x44a>
 8002090:	2302      	movs	r3, #2
 8002092:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002096:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800209a:	fa93 f3a3 	rbit	r3, r3
 800209e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80020a2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020a6:	fab3 f383 	clz	r3, r3
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	095b      	lsrs	r3, r3, #5
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	f043 0301 	orr.w	r3, r3, #1
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d102      	bne.n	80020c0 <HAL_RCC_OscConfig+0x3a0>
 80020ba:	4b93      	ldr	r3, [pc, #588]	; (8002308 <HAL_RCC_OscConfig+0x5e8>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	e013      	b.n	80020e8 <HAL_RCC_OscConfig+0x3c8>
 80020c0:	2302      	movs	r3, #2
 80020c2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80020ca:	fa93 f3a3 	rbit	r3, r3
 80020ce:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80020d2:	2302      	movs	r3, #2
 80020d4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80020d8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80020dc:	fa93 f3a3 	rbit	r3, r3
 80020e0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80020e4:	4b88      	ldr	r3, [pc, #544]	; (8002308 <HAL_RCC_OscConfig+0x5e8>)
 80020e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e8:	2202      	movs	r2, #2
 80020ea:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80020ee:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80020f2:	fa92 f2a2 	rbit	r2, r2
 80020f6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80020fa:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80020fe:	fab2 f282 	clz	r2, r2
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	f042 0220 	orr.w	r2, r2, #32
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	f002 021f 	and.w	r2, r2, #31
 800210e:	2101      	movs	r1, #1
 8002110:	fa01 f202 	lsl.w	r2, r1, r2
 8002114:	4013      	ands	r3, r2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00a      	beq.n	8002130 <HAL_RCC_OscConfig+0x410>
 800211a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800211e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d002      	beq.n	8002130 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	f000 be2e 	b.w	8002d8c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002130:	4b75      	ldr	r3, [pc, #468]	; (8002308 <HAL_RCC_OscConfig+0x5e8>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002138:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800213c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	21f8      	movs	r1, #248	; 0xf8
 8002146:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800214e:	fa91 f1a1 	rbit	r1, r1
 8002152:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002156:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800215a:	fab1 f181 	clz	r1, r1
 800215e:	b2c9      	uxtb	r1, r1
 8002160:	408b      	lsls	r3, r1
 8002162:	4969      	ldr	r1, [pc, #420]	; (8002308 <HAL_RCC_OscConfig+0x5e8>)
 8002164:	4313      	orrs	r3, r2
 8002166:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002168:	e0fd      	b.n	8002366 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800216a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 8088 	beq.w	800228c <HAL_RCC_OscConfig+0x56c>
 800217c:	2301      	movs	r3, #1
 800217e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002182:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002186:	fa93 f3a3 	rbit	r3, r3
 800218a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800218e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002192:	fab3 f383 	clz	r3, r3
 8002196:	b2db      	uxtb	r3, r3
 8002198:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800219c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	461a      	mov	r2, r3
 80021a4:	2301      	movs	r3, #1
 80021a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a8:	f7ff f81e 	bl	80011e8 <HAL_GetTick>
 80021ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b0:	e00a      	b.n	80021c8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021b2:	f7ff f819 	bl	80011e8 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d902      	bls.n	80021c8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	f000 bde2 	b.w	8002d8c <HAL_RCC_OscConfig+0x106c>
 80021c8:	2302      	movs	r3, #2
 80021ca:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ce:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80021d2:	fa93 f3a3 	rbit	r3, r3
 80021d6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80021da:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021de:	fab3 f383 	clz	r3, r3
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	095b      	lsrs	r3, r3, #5
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d102      	bne.n	80021f8 <HAL_RCC_OscConfig+0x4d8>
 80021f2:	4b45      	ldr	r3, [pc, #276]	; (8002308 <HAL_RCC_OscConfig+0x5e8>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	e013      	b.n	8002220 <HAL_RCC_OscConfig+0x500>
 80021f8:	2302      	movs	r3, #2
 80021fa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002202:	fa93 f3a3 	rbit	r3, r3
 8002206:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800220a:	2302      	movs	r3, #2
 800220c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002210:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002214:	fa93 f3a3 	rbit	r3, r3
 8002218:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800221c:	4b3a      	ldr	r3, [pc, #232]	; (8002308 <HAL_RCC_OscConfig+0x5e8>)
 800221e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002220:	2202      	movs	r2, #2
 8002222:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002226:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800222a:	fa92 f2a2 	rbit	r2, r2
 800222e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002232:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002236:	fab2 f282 	clz	r2, r2
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	f042 0220 	orr.w	r2, r2, #32
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	f002 021f 	and.w	r2, r2, #31
 8002246:	2101      	movs	r1, #1
 8002248:	fa01 f202 	lsl.w	r2, r1, r2
 800224c:	4013      	ands	r3, r2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0af      	beq.n	80021b2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002252:	4b2d      	ldr	r3, [pc, #180]	; (8002308 <HAL_RCC_OscConfig+0x5e8>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800225a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800225e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	21f8      	movs	r1, #248	; 0xf8
 8002268:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002270:	fa91 f1a1 	rbit	r1, r1
 8002274:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002278:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800227c:	fab1 f181 	clz	r1, r1
 8002280:	b2c9      	uxtb	r1, r1
 8002282:	408b      	lsls	r3, r1
 8002284:	4920      	ldr	r1, [pc, #128]	; (8002308 <HAL_RCC_OscConfig+0x5e8>)
 8002286:	4313      	orrs	r3, r2
 8002288:	600b      	str	r3, [r1, #0]
 800228a:	e06c      	b.n	8002366 <HAL_RCC_OscConfig+0x646>
 800228c:	2301      	movs	r3, #1
 800228e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002292:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002296:	fa93 f3a3 	rbit	r3, r3
 800229a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800229e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022a2:	fab3 f383 	clz	r3, r3
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	461a      	mov	r2, r3
 80022b4:	2300      	movs	r3, #0
 80022b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b8:	f7fe ff96 	bl	80011e8 <HAL_GetTick>
 80022bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c0:	e00a      	b.n	80022d8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022c2:	f7fe ff91 	bl	80011e8 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d902      	bls.n	80022d8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	f000 bd5a 	b.w	8002d8c <HAL_RCC_OscConfig+0x106c>
 80022d8:	2302      	movs	r3, #2
 80022da:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022de:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80022e2:	fa93 f3a3 	rbit	r3, r3
 80022e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80022ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ee:	fab3 f383 	clz	r3, r3
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	095b      	lsrs	r3, r3, #5
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d104      	bne.n	800230c <HAL_RCC_OscConfig+0x5ec>
 8002302:	4b01      	ldr	r3, [pc, #4]	; (8002308 <HAL_RCC_OscConfig+0x5e8>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	e015      	b.n	8002334 <HAL_RCC_OscConfig+0x614>
 8002308:	40021000 	.word	0x40021000
 800230c:	2302      	movs	r3, #2
 800230e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002312:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002316:	fa93 f3a3 	rbit	r3, r3
 800231a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800231e:	2302      	movs	r3, #2
 8002320:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002324:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002328:	fa93 f3a3 	rbit	r3, r3
 800232c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002330:	4bc8      	ldr	r3, [pc, #800]	; (8002654 <HAL_RCC_OscConfig+0x934>)
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	2202      	movs	r2, #2
 8002336:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800233a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800233e:	fa92 f2a2 	rbit	r2, r2
 8002342:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002346:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800234a:	fab2 f282 	clz	r2, r2
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	f042 0220 	orr.w	r2, r2, #32
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	f002 021f 	and.w	r2, r2, #31
 800235a:	2101      	movs	r1, #1
 800235c:	fa01 f202 	lsl.w	r2, r1, r2
 8002360:	4013      	ands	r3, r2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1ad      	bne.n	80022c2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800236a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0308 	and.w	r3, r3, #8
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 8110 	beq.w	800259c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800237c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002380:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d079      	beq.n	8002480 <HAL_RCC_OscConfig+0x760>
 800238c:	2301      	movs	r3, #1
 800238e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002392:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002396:	fa93 f3a3 	rbit	r3, r3
 800239a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800239e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023a2:	fab3 f383 	clz	r3, r3
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	461a      	mov	r2, r3
 80023aa:	4bab      	ldr	r3, [pc, #684]	; (8002658 <HAL_RCC_OscConfig+0x938>)
 80023ac:	4413      	add	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	461a      	mov	r2, r3
 80023b2:	2301      	movs	r3, #1
 80023b4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b6:	f7fe ff17 	bl	80011e8 <HAL_GetTick>
 80023ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023be:	e00a      	b.n	80023d6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023c0:	f7fe ff12 	bl	80011e8 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d902      	bls.n	80023d6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	f000 bcdb 	b.w	8002d8c <HAL_RCC_OscConfig+0x106c>
 80023d6:	2302      	movs	r3, #2
 80023d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80023e0:	fa93 f3a3 	rbit	r3, r3
 80023e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80023e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80023f0:	2202      	movs	r2, #2
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	fa93 f2a3 	rbit	r2, r3
 8002402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002406:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002410:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002414:	2202      	movs	r2, #2
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	fa93 f2a3 	rbit	r2, r3
 8002426:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800242a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800242e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002430:	4b88      	ldr	r3, [pc, #544]	; (8002654 <HAL_RCC_OscConfig+0x934>)
 8002432:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002438:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800243c:	2102      	movs	r1, #2
 800243e:	6019      	str	r1, [r3, #0]
 8002440:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002444:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	fa93 f1a3 	rbit	r1, r3
 800244e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002452:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002456:	6019      	str	r1, [r3, #0]
  return result;
 8002458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800245c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	fab3 f383 	clz	r3, r3
 8002466:	b2db      	uxtb	r3, r3
 8002468:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800246c:	b2db      	uxtb	r3, r3
 800246e:	f003 031f 	and.w	r3, r3, #31
 8002472:	2101      	movs	r1, #1
 8002474:	fa01 f303 	lsl.w	r3, r1, r3
 8002478:	4013      	ands	r3, r2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d0a0      	beq.n	80023c0 <HAL_RCC_OscConfig+0x6a0>
 800247e:	e08d      	b.n	800259c <HAL_RCC_OscConfig+0x87c>
 8002480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002484:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002488:	2201      	movs	r2, #1
 800248a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002490:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	fa93 f2a3 	rbit	r2, r3
 800249a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80024a2:	601a      	str	r2, [r3, #0]
  return result;
 80024a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80024ac:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ae:	fab3 f383 	clz	r3, r3
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	461a      	mov	r2, r3
 80024b6:	4b68      	ldr	r3, [pc, #416]	; (8002658 <HAL_RCC_OscConfig+0x938>)
 80024b8:	4413      	add	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	461a      	mov	r2, r3
 80024be:	2300      	movs	r3, #0
 80024c0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c2:	f7fe fe91 	bl	80011e8 <HAL_GetTick>
 80024c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ca:	e00a      	b.n	80024e2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024cc:	f7fe fe8c 	bl	80011e8 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d902      	bls.n	80024e2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	f000 bc55 	b.w	8002d8c <HAL_RCC_OscConfig+0x106c>
 80024e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80024ea:	2202      	movs	r2, #2
 80024ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	fa93 f2a3 	rbit	r2, r3
 80024fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002500:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800250a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800250e:	2202      	movs	r2, #2
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002516:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	fa93 f2a3 	rbit	r2, r3
 8002520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002524:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002532:	2202      	movs	r2, #2
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	fa93 f2a3 	rbit	r2, r3
 8002544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002548:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800254c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800254e:	4b41      	ldr	r3, [pc, #260]	; (8002654 <HAL_RCC_OscConfig+0x934>)
 8002550:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002556:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800255a:	2102      	movs	r1, #2
 800255c:	6019      	str	r1, [r3, #0]
 800255e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002562:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	fa93 f1a3 	rbit	r1, r3
 800256c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002570:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002574:	6019      	str	r1, [r3, #0]
  return result;
 8002576:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800257a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	fab3 f383 	clz	r3, r3
 8002584:	b2db      	uxtb	r3, r3
 8002586:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800258a:	b2db      	uxtb	r3, r3
 800258c:	f003 031f 	and.w	r3, r3, #31
 8002590:	2101      	movs	r1, #1
 8002592:	fa01 f303 	lsl.w	r3, r1, r3
 8002596:	4013      	ands	r3, r2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d197      	bne.n	80024cc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800259c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 81a1 	beq.w	80028f4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025b2:	2300      	movs	r3, #0
 80025b4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025b8:	4b26      	ldr	r3, [pc, #152]	; (8002654 <HAL_RCC_OscConfig+0x934>)
 80025ba:	69db      	ldr	r3, [r3, #28]
 80025bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d116      	bne.n	80025f2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025c4:	4b23      	ldr	r3, [pc, #140]	; (8002654 <HAL_RCC_OscConfig+0x934>)
 80025c6:	69db      	ldr	r3, [r3, #28]
 80025c8:	4a22      	ldr	r2, [pc, #136]	; (8002654 <HAL_RCC_OscConfig+0x934>)
 80025ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ce:	61d3      	str	r3, [r2, #28]
 80025d0:	4b20      	ldr	r3, [pc, #128]	; (8002654 <HAL_RCC_OscConfig+0x934>)
 80025d2:	69db      	ldr	r3, [r3, #28]
 80025d4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80025d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025dc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80025ea:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80025ec:	2301      	movs	r3, #1
 80025ee:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f2:	4b1a      	ldr	r3, [pc, #104]	; (800265c <HAL_RCC_OscConfig+0x93c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d11a      	bne.n	8002634 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025fe:	4b17      	ldr	r3, [pc, #92]	; (800265c <HAL_RCC_OscConfig+0x93c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a16      	ldr	r2, [pc, #88]	; (800265c <HAL_RCC_OscConfig+0x93c>)
 8002604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002608:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800260a:	f7fe fded 	bl	80011e8 <HAL_GetTick>
 800260e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002612:	e009      	b.n	8002628 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002614:	f7fe fde8 	bl	80011e8 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b64      	cmp	r3, #100	; 0x64
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e3b1      	b.n	8002d8c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002628:	4b0c      	ldr	r3, [pc, #48]	; (800265c <HAL_RCC_OscConfig+0x93c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0ef      	beq.n	8002614 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002638:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d10d      	bne.n	8002660 <HAL_RCC_OscConfig+0x940>
 8002644:	4b03      	ldr	r3, [pc, #12]	; (8002654 <HAL_RCC_OscConfig+0x934>)
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	4a02      	ldr	r2, [pc, #8]	; (8002654 <HAL_RCC_OscConfig+0x934>)
 800264a:	f043 0301 	orr.w	r3, r3, #1
 800264e:	6213      	str	r3, [r2, #32]
 8002650:	e03c      	b.n	80026cc <HAL_RCC_OscConfig+0x9ac>
 8002652:	bf00      	nop
 8002654:	40021000 	.word	0x40021000
 8002658:	10908120 	.word	0x10908120
 800265c:	40007000 	.word	0x40007000
 8002660:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002664:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d10c      	bne.n	800268a <HAL_RCC_OscConfig+0x96a>
 8002670:	4bc1      	ldr	r3, [pc, #772]	; (8002978 <HAL_RCC_OscConfig+0xc58>)
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	4ac0      	ldr	r2, [pc, #768]	; (8002978 <HAL_RCC_OscConfig+0xc58>)
 8002676:	f023 0301 	bic.w	r3, r3, #1
 800267a:	6213      	str	r3, [r2, #32]
 800267c:	4bbe      	ldr	r3, [pc, #760]	; (8002978 <HAL_RCC_OscConfig+0xc58>)
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	4abd      	ldr	r2, [pc, #756]	; (8002978 <HAL_RCC_OscConfig+0xc58>)
 8002682:	f023 0304 	bic.w	r3, r3, #4
 8002686:	6213      	str	r3, [r2, #32]
 8002688:	e020      	b.n	80026cc <HAL_RCC_OscConfig+0x9ac>
 800268a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	2b05      	cmp	r3, #5
 8002698:	d10c      	bne.n	80026b4 <HAL_RCC_OscConfig+0x994>
 800269a:	4bb7      	ldr	r3, [pc, #732]	; (8002978 <HAL_RCC_OscConfig+0xc58>)
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	4ab6      	ldr	r2, [pc, #728]	; (8002978 <HAL_RCC_OscConfig+0xc58>)
 80026a0:	f043 0304 	orr.w	r3, r3, #4
 80026a4:	6213      	str	r3, [r2, #32]
 80026a6:	4bb4      	ldr	r3, [pc, #720]	; (8002978 <HAL_RCC_OscConfig+0xc58>)
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	4ab3      	ldr	r2, [pc, #716]	; (8002978 <HAL_RCC_OscConfig+0xc58>)
 80026ac:	f043 0301 	orr.w	r3, r3, #1
 80026b0:	6213      	str	r3, [r2, #32]
 80026b2:	e00b      	b.n	80026cc <HAL_RCC_OscConfig+0x9ac>
 80026b4:	4bb0      	ldr	r3, [pc, #704]	; (8002978 <HAL_RCC_OscConfig+0xc58>)
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	4aaf      	ldr	r2, [pc, #700]	; (8002978 <HAL_RCC_OscConfig+0xc58>)
 80026ba:	f023 0301 	bic.w	r3, r3, #1
 80026be:	6213      	str	r3, [r2, #32]
 80026c0:	4bad      	ldr	r3, [pc, #692]	; (8002978 <HAL_RCC_OscConfig+0xc58>)
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	4aac      	ldr	r2, [pc, #688]	; (8002978 <HAL_RCC_OscConfig+0xc58>)
 80026c6:	f023 0304 	bic.w	r3, r3, #4
 80026ca:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 8081 	beq.w	80027e0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026de:	f7fe fd83 	bl	80011e8 <HAL_GetTick>
 80026e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e6:	e00b      	b.n	8002700 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026e8:	f7fe fd7e 	bl	80011e8 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e345      	b.n	8002d8c <HAL_RCC_OscConfig+0x106c>
 8002700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002704:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002708:	2202      	movs	r2, #2
 800270a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002710:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	fa93 f2a3 	rbit	r2, r3
 800271a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800271e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002728:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800272c:	2202      	movs	r2, #2
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002734:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	fa93 f2a3 	rbit	r2, r3
 800273e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002742:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002746:	601a      	str	r2, [r3, #0]
  return result;
 8002748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800274c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002750:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002752:	fab3 f383 	clz	r3, r3
 8002756:	b2db      	uxtb	r3, r3
 8002758:	095b      	lsrs	r3, r3, #5
 800275a:	b2db      	uxtb	r3, r3
 800275c:	f043 0302 	orr.w	r3, r3, #2
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d102      	bne.n	800276c <HAL_RCC_OscConfig+0xa4c>
 8002766:	4b84      	ldr	r3, [pc, #528]	; (8002978 <HAL_RCC_OscConfig+0xc58>)
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	e013      	b.n	8002794 <HAL_RCC_OscConfig+0xa74>
 800276c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002770:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002774:	2202      	movs	r2, #2
 8002776:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002778:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	fa93 f2a3 	rbit	r2, r3
 8002786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800278a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	4b79      	ldr	r3, [pc, #484]	; (8002978 <HAL_RCC_OscConfig+0xc58>)
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002798:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800279c:	2102      	movs	r1, #2
 800279e:	6011      	str	r1, [r2, #0]
 80027a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027a4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80027a8:	6812      	ldr	r2, [r2, #0]
 80027aa:	fa92 f1a2 	rbit	r1, r2
 80027ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027b2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80027b6:	6011      	str	r1, [r2, #0]
  return result;
 80027b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027bc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80027c0:	6812      	ldr	r2, [r2, #0]
 80027c2:	fab2 f282 	clz	r2, r2
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	f002 021f 	and.w	r2, r2, #31
 80027d2:	2101      	movs	r1, #1
 80027d4:	fa01 f202 	lsl.w	r2, r1, r2
 80027d8:	4013      	ands	r3, r2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d084      	beq.n	80026e8 <HAL_RCC_OscConfig+0x9c8>
 80027de:	e07f      	b.n	80028e0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e0:	f7fe fd02 	bl	80011e8 <HAL_GetTick>
 80027e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e8:	e00b      	b.n	8002802 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027ea:	f7fe fcfd 	bl	80011e8 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e2c4      	b.n	8002d8c <HAL_RCC_OscConfig+0x106c>
 8002802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002806:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800280a:	2202      	movs	r2, #2
 800280c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002812:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	fa93 f2a3 	rbit	r2, r3
 800281c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002820:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800282e:	2202      	movs	r2, #2
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002836:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	fa93 f2a3 	rbit	r2, r3
 8002840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002844:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002848:	601a      	str	r2, [r3, #0]
  return result;
 800284a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800284e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002852:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002854:	fab3 f383 	clz	r3, r3
 8002858:	b2db      	uxtb	r3, r3
 800285a:	095b      	lsrs	r3, r3, #5
 800285c:	b2db      	uxtb	r3, r3
 800285e:	f043 0302 	orr.w	r3, r3, #2
 8002862:	b2db      	uxtb	r3, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d102      	bne.n	800286e <HAL_RCC_OscConfig+0xb4e>
 8002868:	4b43      	ldr	r3, [pc, #268]	; (8002978 <HAL_RCC_OscConfig+0xc58>)
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	e013      	b.n	8002896 <HAL_RCC_OscConfig+0xb76>
 800286e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002872:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002876:	2202      	movs	r2, #2
 8002878:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	fa93 f2a3 	rbit	r2, r3
 8002888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800288c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	4b39      	ldr	r3, [pc, #228]	; (8002978 <HAL_RCC_OscConfig+0xc58>)
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002896:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800289a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800289e:	2102      	movs	r1, #2
 80028a0:	6011      	str	r1, [r2, #0]
 80028a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028a6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80028aa:	6812      	ldr	r2, [r2, #0]
 80028ac:	fa92 f1a2 	rbit	r1, r2
 80028b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028b4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80028b8:	6011      	str	r1, [r2, #0]
  return result;
 80028ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028be:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80028c2:	6812      	ldr	r2, [r2, #0]
 80028c4:	fab2 f282 	clz	r2, r2
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	f002 021f 	and.w	r2, r2, #31
 80028d4:	2101      	movs	r1, #1
 80028d6:	fa01 f202 	lsl.w	r2, r1, r2
 80028da:	4013      	ands	r3, r2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d184      	bne.n	80027ea <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028e0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d105      	bne.n	80028f4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e8:	4b23      	ldr	r3, [pc, #140]	; (8002978 <HAL_RCC_OscConfig+0xc58>)
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	4a22      	ldr	r2, [pc, #136]	; (8002978 <HAL_RCC_OscConfig+0xc58>)
 80028ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028f2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	69db      	ldr	r3, [r3, #28]
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 8242 	beq.w	8002d8a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002906:	4b1c      	ldr	r3, [pc, #112]	; (8002978 <HAL_RCC_OscConfig+0xc58>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f003 030c 	and.w	r3, r3, #12
 800290e:	2b08      	cmp	r3, #8
 8002910:	f000 8213 	beq.w	8002d3a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002918:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	69db      	ldr	r3, [r3, #28]
 8002920:	2b02      	cmp	r3, #2
 8002922:	f040 8162 	bne.w	8002bea <HAL_RCC_OscConfig+0xeca>
 8002926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800292e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002932:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002938:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	fa93 f2a3 	rbit	r2, r3
 8002942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002946:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800294a:	601a      	str	r2, [r3, #0]
  return result;
 800294c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002950:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002954:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002956:	fab3 f383 	clz	r3, r3
 800295a:	b2db      	uxtb	r3, r3
 800295c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002960:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	461a      	mov	r2, r3
 8002968:	2300      	movs	r3, #0
 800296a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296c:	f7fe fc3c 	bl	80011e8 <HAL_GetTick>
 8002970:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002974:	e00c      	b.n	8002990 <HAL_RCC_OscConfig+0xc70>
 8002976:	bf00      	nop
 8002978:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800297c:	f7fe fc34 	bl	80011e8 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e1fd      	b.n	8002d8c <HAL_RCC_OscConfig+0x106c>
 8002990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002994:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002998:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800299c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	fa93 f2a3 	rbit	r2, r3
 80029ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80029b4:	601a      	str	r2, [r3, #0]
  return result;
 80029b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ba:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80029be:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c0:	fab3 f383 	clz	r3, r3
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	095b      	lsrs	r3, r3, #5
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	f043 0301 	orr.w	r3, r3, #1
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d102      	bne.n	80029da <HAL_RCC_OscConfig+0xcba>
 80029d4:	4bb0      	ldr	r3, [pc, #704]	; (8002c98 <HAL_RCC_OscConfig+0xf78>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	e027      	b.n	8002a2a <HAL_RCC_OscConfig+0xd0a>
 80029da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029de:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80029e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ec:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	fa93 f2a3 	rbit	r2, r3
 80029f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029fa:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a04:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002a08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a12:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	fa93 f2a3 	rbit	r2, r3
 8002a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a20:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	4b9c      	ldr	r3, [pc, #624]	; (8002c98 <HAL_RCC_OscConfig+0xf78>)
 8002a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a2e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002a32:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a36:	6011      	str	r1, [r2, #0]
 8002a38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a3c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002a40:	6812      	ldr	r2, [r2, #0]
 8002a42:	fa92 f1a2 	rbit	r1, r2
 8002a46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a4a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002a4e:	6011      	str	r1, [r2, #0]
  return result;
 8002a50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a54:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002a58:	6812      	ldr	r2, [r2, #0]
 8002a5a:	fab2 f282 	clz	r2, r2
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	f042 0220 	orr.w	r2, r2, #32
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	f002 021f 	and.w	r2, r2, #31
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a70:	4013      	ands	r3, r2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d182      	bne.n	800297c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a76:	4b88      	ldr	r3, [pc, #544]	; (8002c98 <HAL_RCC_OscConfig+0xf78>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002a8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	430b      	orrs	r3, r1
 8002a98:	497f      	ldr	r1, [pc, #508]	; (8002c98 <HAL_RCC_OscConfig+0xf78>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	604b      	str	r3, [r1, #4]
 8002a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002aa6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002aaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	fa93 f2a3 	rbit	r2, r3
 8002aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002abe:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002ac2:	601a      	str	r2, [r3, #0]
  return result;
 8002ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002acc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ace:	fab3 f383 	clz	r3, r3
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ad8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	461a      	mov	r2, r3
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae4:	f7fe fb80 	bl	80011e8 <HAL_GetTick>
 8002ae8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002aec:	e009      	b.n	8002b02 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aee:	f7fe fb7b 	bl	80011e8 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e144      	b.n	8002d8c <HAL_RCC_OscConfig+0x106c>
 8002b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b06:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002b0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b14:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	fa93 f2a3 	rbit	r2, r3
 8002b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b22:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002b26:	601a      	str	r2, [r3, #0]
  return result;
 8002b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b2c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002b30:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b32:	fab3 f383 	clz	r3, r3
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	095b      	lsrs	r3, r3, #5
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d102      	bne.n	8002b4c <HAL_RCC_OscConfig+0xe2c>
 8002b46:	4b54      	ldr	r3, [pc, #336]	; (8002c98 <HAL_RCC_OscConfig+0xf78>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	e027      	b.n	8002b9c <HAL_RCC_OscConfig+0xe7c>
 8002b4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b50:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002b54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b5e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	fa93 f2a3 	rbit	r2, r3
 8002b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b76:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002b7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b84:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	fa93 f2a3 	rbit	r2, r3
 8002b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b92:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	4b3f      	ldr	r3, [pc, #252]	; (8002c98 <HAL_RCC_OscConfig+0xf78>)
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ba0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002ba4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ba8:	6011      	str	r1, [r2, #0]
 8002baa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bae:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002bb2:	6812      	ldr	r2, [r2, #0]
 8002bb4:	fa92 f1a2 	rbit	r1, r2
 8002bb8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bbc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002bc0:	6011      	str	r1, [r2, #0]
  return result;
 8002bc2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bc6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002bca:	6812      	ldr	r2, [r2, #0]
 8002bcc:	fab2 f282 	clz	r2, r2
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	f042 0220 	orr.w	r2, r2, #32
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	f002 021f 	and.w	r2, r2, #31
 8002bdc:	2101      	movs	r1, #1
 8002bde:	fa01 f202 	lsl.w	r2, r1, r2
 8002be2:	4013      	ands	r3, r2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d082      	beq.n	8002aee <HAL_RCC_OscConfig+0xdce>
 8002be8:	e0cf      	b.n	8002d8a <HAL_RCC_OscConfig+0x106a>
 8002bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bee:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002bf2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002bf6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bfc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	fa93 f2a3 	rbit	r2, r3
 8002c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c0a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002c0e:	601a      	str	r2, [r3, #0]
  return result;
 8002c10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c14:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002c18:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c1a:	fab3 f383 	clz	r3, r3
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c30:	f7fe fada 	bl	80011e8 <HAL_GetTick>
 8002c34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c38:	e009      	b.n	8002c4e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c3a:	f7fe fad5 	bl	80011e8 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e09e      	b.n	8002d8c <HAL_RCC_OscConfig+0x106c>
 8002c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c52:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002c56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c60:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	fa93 f2a3 	rbit	r2, r3
 8002c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c6e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c72:	601a      	str	r2, [r3, #0]
  return result;
 8002c74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c78:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c7c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c7e:	fab3 f383 	clz	r3, r3
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	095b      	lsrs	r3, r3, #5
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	f043 0301 	orr.w	r3, r3, #1
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d104      	bne.n	8002c9c <HAL_RCC_OscConfig+0xf7c>
 8002c92:	4b01      	ldr	r3, [pc, #4]	; (8002c98 <HAL_RCC_OscConfig+0xf78>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	e029      	b.n	8002cec <HAL_RCC_OscConfig+0xfcc>
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002ca4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ca8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cae:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	fa93 f2a3 	rbit	r2, r3
 8002cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cbc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002cca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	fa93 f2a3 	rbit	r2, r3
 8002cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	4b2b      	ldr	r3, [pc, #172]	; (8002d98 <HAL_RCC_OscConfig+0x1078>)
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cf0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002cf4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002cf8:	6011      	str	r1, [r2, #0]
 8002cfa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cfe:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002d02:	6812      	ldr	r2, [r2, #0]
 8002d04:	fa92 f1a2 	rbit	r1, r2
 8002d08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d0c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002d10:	6011      	str	r1, [r2, #0]
  return result;
 8002d12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d16:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002d1a:	6812      	ldr	r2, [r2, #0]
 8002d1c:	fab2 f282 	clz	r2, r2
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	f042 0220 	orr.w	r2, r2, #32
 8002d26:	b2d2      	uxtb	r2, r2
 8002d28:	f002 021f 	and.w	r2, r2, #31
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d32:	4013      	ands	r3, r2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d180      	bne.n	8002c3a <HAL_RCC_OscConfig+0xf1a>
 8002d38:	e027      	b.n	8002d8a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d101      	bne.n	8002d4e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e01e      	b.n	8002d8c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d4e:	4b12      	ldr	r3, [pc, #72]	; (8002d98 <HAL_RCC_OscConfig+0x1078>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d56:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002d5a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d10b      	bne.n	8002d86 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002d6e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002d72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d001      	beq.n	8002d8a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40021000 	.word	0x40021000

08002d9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b09e      	sub	sp, #120	; 0x78
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e162      	b.n	800307a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002db4:	4b90      	ldr	r3, [pc, #576]	; (8002ff8 <HAL_RCC_ClockConfig+0x25c>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d910      	bls.n	8002de4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc2:	4b8d      	ldr	r3, [pc, #564]	; (8002ff8 <HAL_RCC_ClockConfig+0x25c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f023 0207 	bic.w	r2, r3, #7
 8002dca:	498b      	ldr	r1, [pc, #556]	; (8002ff8 <HAL_RCC_ClockConfig+0x25c>)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd2:	4b89      	ldr	r3, [pc, #548]	; (8002ff8 <HAL_RCC_ClockConfig+0x25c>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d001      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e14a      	b.n	800307a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d008      	beq.n	8002e02 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002df0:	4b82      	ldr	r3, [pc, #520]	; (8002ffc <HAL_RCC_ClockConfig+0x260>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	497f      	ldr	r1, [pc, #508]	; (8002ffc <HAL_RCC_ClockConfig+0x260>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f000 80dc 	beq.w	8002fc8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d13c      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xf6>
 8002e18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e1c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e20:	fa93 f3a3 	rbit	r3, r3
 8002e24:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e28:	fab3 f383 	clz	r3, r3
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	095b      	lsrs	r3, r3, #5
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	f043 0301 	orr.w	r3, r3, #1
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d102      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xa6>
 8002e3c:	4b6f      	ldr	r3, [pc, #444]	; (8002ffc <HAL_RCC_ClockConfig+0x260>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	e00f      	b.n	8002e62 <HAL_RCC_ClockConfig+0xc6>
 8002e42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e46:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e4a:	fa93 f3a3 	rbit	r3, r3
 8002e4e:	667b      	str	r3, [r7, #100]	; 0x64
 8002e50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e54:	663b      	str	r3, [r7, #96]	; 0x60
 8002e56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e58:	fa93 f3a3 	rbit	r3, r3
 8002e5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e5e:	4b67      	ldr	r3, [pc, #412]	; (8002ffc <HAL_RCC_ClockConfig+0x260>)
 8002e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e66:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e6a:	fa92 f2a2 	rbit	r2, r2
 8002e6e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002e70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e72:	fab2 f282 	clz	r2, r2
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	f042 0220 	orr.w	r2, r2, #32
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	f002 021f 	and.w	r2, r2, #31
 8002e82:	2101      	movs	r1, #1
 8002e84:	fa01 f202 	lsl.w	r2, r1, r2
 8002e88:	4013      	ands	r3, r2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d17b      	bne.n	8002f86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e0f3      	b.n	800307a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d13c      	bne.n	8002f14 <HAL_RCC_ClockConfig+0x178>
 8002e9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e9e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ea2:	fa93 f3a3 	rbit	r3, r3
 8002ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eaa:	fab3 f383 	clz	r3, r3
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	095b      	lsrs	r3, r3, #5
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d102      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0x128>
 8002ebe:	4b4f      	ldr	r3, [pc, #316]	; (8002ffc <HAL_RCC_ClockConfig+0x260>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	e00f      	b.n	8002ee4 <HAL_RCC_ClockConfig+0x148>
 8002ec4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ec8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ecc:	fa93 f3a3 	rbit	r3, r3
 8002ed0:	647b      	str	r3, [r7, #68]	; 0x44
 8002ed2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ed6:	643b      	str	r3, [r7, #64]	; 0x40
 8002ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eda:	fa93 f3a3 	rbit	r3, r3
 8002ede:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ee0:	4b46      	ldr	r3, [pc, #280]	; (8002ffc <HAL_RCC_ClockConfig+0x260>)
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ee8:	63ba      	str	r2, [r7, #56]	; 0x38
 8002eea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002eec:	fa92 f2a2 	rbit	r2, r2
 8002ef0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002ef2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ef4:	fab2 f282 	clz	r2, r2
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	f042 0220 	orr.w	r2, r2, #32
 8002efe:	b2d2      	uxtb	r2, r2
 8002f00:	f002 021f 	and.w	r2, r2, #31
 8002f04:	2101      	movs	r1, #1
 8002f06:	fa01 f202 	lsl.w	r2, r1, r2
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d13a      	bne.n	8002f86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e0b2      	b.n	800307a <HAL_RCC_ClockConfig+0x2de>
 8002f14:	2302      	movs	r3, #2
 8002f16:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1a:	fa93 f3a3 	rbit	r3, r3
 8002f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f22:	fab3 f383 	clz	r3, r3
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	095b      	lsrs	r3, r3, #5
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	f043 0301 	orr.w	r3, r3, #1
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d102      	bne.n	8002f3c <HAL_RCC_ClockConfig+0x1a0>
 8002f36:	4b31      	ldr	r3, [pc, #196]	; (8002ffc <HAL_RCC_ClockConfig+0x260>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	e00d      	b.n	8002f58 <HAL_RCC_ClockConfig+0x1bc>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f42:	fa93 f3a3 	rbit	r3, r3
 8002f46:	627b      	str	r3, [r7, #36]	; 0x24
 8002f48:	2302      	movs	r3, #2
 8002f4a:	623b      	str	r3, [r7, #32]
 8002f4c:	6a3b      	ldr	r3, [r7, #32]
 8002f4e:	fa93 f3a3 	rbit	r3, r3
 8002f52:	61fb      	str	r3, [r7, #28]
 8002f54:	4b29      	ldr	r3, [pc, #164]	; (8002ffc <HAL_RCC_ClockConfig+0x260>)
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	2202      	movs	r2, #2
 8002f5a:	61ba      	str	r2, [r7, #24]
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	fa92 f2a2 	rbit	r2, r2
 8002f62:	617a      	str	r2, [r7, #20]
  return result;
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	fab2 f282 	clz	r2, r2
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	f042 0220 	orr.w	r2, r2, #32
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	f002 021f 	and.w	r2, r2, #31
 8002f76:	2101      	movs	r1, #1
 8002f78:	fa01 f202 	lsl.w	r2, r1, r2
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e079      	b.n	800307a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f86:	4b1d      	ldr	r3, [pc, #116]	; (8002ffc <HAL_RCC_ClockConfig+0x260>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f023 0203 	bic.w	r2, r3, #3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	491a      	ldr	r1, [pc, #104]	; (8002ffc <HAL_RCC_ClockConfig+0x260>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f98:	f7fe f926 	bl	80011e8 <HAL_GetTick>
 8002f9c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f9e:	e00a      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa0:	f7fe f922 	bl	80011e8 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e061      	b.n	800307a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fb6:	4b11      	ldr	r3, [pc, #68]	; (8002ffc <HAL_RCC_ClockConfig+0x260>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f003 020c 	and.w	r2, r3, #12
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d1eb      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <HAL_RCC_ClockConfig+0x25c>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0307 	and.w	r3, r3, #7
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d214      	bcs.n	8003000 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd6:	4b08      	ldr	r3, [pc, #32]	; (8002ff8 <HAL_RCC_ClockConfig+0x25c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f023 0207 	bic.w	r2, r3, #7
 8002fde:	4906      	ldr	r1, [pc, #24]	; (8002ff8 <HAL_RCC_ClockConfig+0x25c>)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe6:	4b04      	ldr	r3, [pc, #16]	; (8002ff8 <HAL_RCC_ClockConfig+0x25c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d005      	beq.n	8003000 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e040      	b.n	800307a <HAL_RCC_ClockConfig+0x2de>
 8002ff8:	40022000 	.word	0x40022000
 8002ffc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b00      	cmp	r3, #0
 800300a:	d008      	beq.n	800301e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800300c:	4b1d      	ldr	r3, [pc, #116]	; (8003084 <HAL_RCC_ClockConfig+0x2e8>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	491a      	ldr	r1, [pc, #104]	; (8003084 <HAL_RCC_ClockConfig+0x2e8>)
 800301a:	4313      	orrs	r3, r2
 800301c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	2b00      	cmp	r3, #0
 8003028:	d009      	beq.n	800303e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800302a:	4b16      	ldr	r3, [pc, #88]	; (8003084 <HAL_RCC_ClockConfig+0x2e8>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	4912      	ldr	r1, [pc, #72]	; (8003084 <HAL_RCC_ClockConfig+0x2e8>)
 800303a:	4313      	orrs	r3, r2
 800303c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800303e:	f000 f829 	bl	8003094 <HAL_RCC_GetSysClockFreq>
 8003042:	4601      	mov	r1, r0
 8003044:	4b0f      	ldr	r3, [pc, #60]	; (8003084 <HAL_RCC_ClockConfig+0x2e8>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800304c:	22f0      	movs	r2, #240	; 0xf0
 800304e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	fa92 f2a2 	rbit	r2, r2
 8003056:	60fa      	str	r2, [r7, #12]
  return result;
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	fab2 f282 	clz	r2, r2
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	40d3      	lsrs	r3, r2
 8003062:	4a09      	ldr	r2, [pc, #36]	; (8003088 <HAL_RCC_ClockConfig+0x2ec>)
 8003064:	5cd3      	ldrb	r3, [r2, r3]
 8003066:	fa21 f303 	lsr.w	r3, r1, r3
 800306a:	4a08      	ldr	r2, [pc, #32]	; (800308c <HAL_RCC_ClockConfig+0x2f0>)
 800306c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800306e:	4b08      	ldr	r3, [pc, #32]	; (8003090 <HAL_RCC_ClockConfig+0x2f4>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4618      	mov	r0, r3
 8003074:	f7fe f874 	bl	8001160 <HAL_InitTick>
  
  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3778      	adds	r7, #120	; 0x78
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	40021000 	.word	0x40021000
 8003088:	08004e9c 	.word	0x08004e9c
 800308c:	20000000 	.word	0x20000000
 8003090:	20000004 	.word	0x20000004

08003094 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003094:	b480      	push	{r7}
 8003096:	b08b      	sub	sp, #44	; 0x2c
 8003098:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800309a:	2300      	movs	r3, #0
 800309c:	61fb      	str	r3, [r7, #28]
 800309e:	2300      	movs	r3, #0
 80030a0:	61bb      	str	r3, [r7, #24]
 80030a2:	2300      	movs	r3, #0
 80030a4:	627b      	str	r3, [r7, #36]	; 0x24
 80030a6:	2300      	movs	r3, #0
 80030a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80030aa:	2300      	movs	r3, #0
 80030ac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80030ae:	4b29      	ldr	r3, [pc, #164]	; (8003154 <HAL_RCC_GetSysClockFreq+0xc0>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	f003 030c 	and.w	r3, r3, #12
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	d002      	beq.n	80030c4 <HAL_RCC_GetSysClockFreq+0x30>
 80030be:	2b08      	cmp	r3, #8
 80030c0:	d003      	beq.n	80030ca <HAL_RCC_GetSysClockFreq+0x36>
 80030c2:	e03c      	b.n	800313e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030c4:	4b24      	ldr	r3, [pc, #144]	; (8003158 <HAL_RCC_GetSysClockFreq+0xc4>)
 80030c6:	623b      	str	r3, [r7, #32]
      break;
 80030c8:	e03c      	b.n	8003144 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80030d0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80030d4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d6:	68ba      	ldr	r2, [r7, #8]
 80030d8:	fa92 f2a2 	rbit	r2, r2
 80030dc:	607a      	str	r2, [r7, #4]
  return result;
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	fab2 f282 	clz	r2, r2
 80030e4:	b2d2      	uxtb	r2, r2
 80030e6:	40d3      	lsrs	r3, r2
 80030e8:	4a1c      	ldr	r2, [pc, #112]	; (800315c <HAL_RCC_GetSysClockFreq+0xc8>)
 80030ea:	5cd3      	ldrb	r3, [r2, r3]
 80030ec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80030ee:	4b19      	ldr	r3, [pc, #100]	; (8003154 <HAL_RCC_GetSysClockFreq+0xc0>)
 80030f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	220f      	movs	r2, #15
 80030f8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	fa92 f2a2 	rbit	r2, r2
 8003100:	60fa      	str	r2, [r7, #12]
  return result;
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	fab2 f282 	clz	r2, r2
 8003108:	b2d2      	uxtb	r2, r2
 800310a:	40d3      	lsrs	r3, r2
 800310c:	4a14      	ldr	r2, [pc, #80]	; (8003160 <HAL_RCC_GetSysClockFreq+0xcc>)
 800310e:	5cd3      	ldrb	r3, [r2, r3]
 8003110:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d008      	beq.n	800312e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800311c:	4a0e      	ldr	r2, [pc, #56]	; (8003158 <HAL_RCC_GetSysClockFreq+0xc4>)
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	fbb2 f2f3 	udiv	r2, r2, r3
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	fb02 f303 	mul.w	r3, r2, r3
 800312a:	627b      	str	r3, [r7, #36]	; 0x24
 800312c:	e004      	b.n	8003138 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	4a0c      	ldr	r2, [pc, #48]	; (8003164 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003132:	fb02 f303 	mul.w	r3, r2, r3
 8003136:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313a:	623b      	str	r3, [r7, #32]
      break;
 800313c:	e002      	b.n	8003144 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800313e:	4b06      	ldr	r3, [pc, #24]	; (8003158 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003140:	623b      	str	r3, [r7, #32]
      break;
 8003142:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003144:	6a3b      	ldr	r3, [r7, #32]
}
 8003146:	4618      	mov	r0, r3
 8003148:	372c      	adds	r7, #44	; 0x2c
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	40021000 	.word	0x40021000
 8003158:	007a1200 	.word	0x007a1200
 800315c:	08004eb4 	.word	0x08004eb4
 8003160:	08004ec4 	.word	0x08004ec4
 8003164:	003d0900 	.word	0x003d0900

08003168 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800316c:	4b03      	ldr	r3, [pc, #12]	; (800317c <HAL_RCC_GetHCLKFreq+0x14>)
 800316e:	681b      	ldr	r3, [r3, #0]
}
 8003170:	4618      	mov	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	20000000 	.word	0x20000000

08003180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003186:	f7ff ffef 	bl	8003168 <HAL_RCC_GetHCLKFreq>
 800318a:	4601      	mov	r1, r0
 800318c:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003194:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003198:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	fa92 f2a2 	rbit	r2, r2
 80031a0:	603a      	str	r2, [r7, #0]
  return result;
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	fab2 f282 	clz	r2, r2
 80031a8:	b2d2      	uxtb	r2, r2
 80031aa:	40d3      	lsrs	r3, r2
 80031ac:	4a04      	ldr	r2, [pc, #16]	; (80031c0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80031ae:	5cd3      	ldrb	r3, [r2, r3]
 80031b0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80031b4:	4618      	mov	r0, r3
 80031b6:	3708      	adds	r7, #8
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40021000 	.word	0x40021000
 80031c0:	08004eac 	.word	0x08004eac

080031c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80031ca:	f7ff ffcd 	bl	8003168 <HAL_RCC_GetHCLKFreq>
 80031ce:	4601      	mov	r1, r0
 80031d0:	4b0b      	ldr	r3, [pc, #44]	; (8003200 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80031d8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80031dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	fa92 f2a2 	rbit	r2, r2
 80031e4:	603a      	str	r2, [r7, #0]
  return result;
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	fab2 f282 	clz	r2, r2
 80031ec:	b2d2      	uxtb	r2, r2
 80031ee:	40d3      	lsrs	r3, r2
 80031f0:	4a04      	ldr	r2, [pc, #16]	; (8003204 <HAL_RCC_GetPCLK2Freq+0x40>)
 80031f2:	5cd3      	ldrb	r3, [r2, r3]
 80031f4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80031f8:	4618      	mov	r0, r3
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40021000 	.word	0x40021000
 8003204:	08004eac 	.word	0x08004eac

08003208 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b092      	sub	sp, #72	; 0x48
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003210:	2300      	movs	r3, #0
 8003212:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003218:	2300      	movs	r3, #0
 800321a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 80d4 	beq.w	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800322c:	4b4e      	ldr	r3, [pc, #312]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10e      	bne.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003238:	4b4b      	ldr	r3, [pc, #300]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800323a:	69db      	ldr	r3, [r3, #28]
 800323c:	4a4a      	ldr	r2, [pc, #296]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800323e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003242:	61d3      	str	r3, [r2, #28]
 8003244:	4b48      	ldr	r3, [pc, #288]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003246:	69db      	ldr	r3, [r3, #28]
 8003248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324c:	60bb      	str	r3, [r7, #8]
 800324e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003250:	2301      	movs	r3, #1
 8003252:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003256:	4b45      	ldr	r3, [pc, #276]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325e:	2b00      	cmp	r3, #0
 8003260:	d118      	bne.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003262:	4b42      	ldr	r3, [pc, #264]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a41      	ldr	r2, [pc, #260]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800326c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800326e:	f7fd ffbb 	bl	80011e8 <HAL_GetTick>
 8003272:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003274:	e008      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003276:	f7fd ffb7 	bl	80011e8 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b64      	cmp	r3, #100	; 0x64
 8003282:	d901      	bls.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e14b      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003288:	4b38      	ldr	r3, [pc, #224]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0f0      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003294:	4b34      	ldr	r3, [pc, #208]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800329c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800329e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 8084 	beq.w	80033ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d07c      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032b4:	4b2c      	ldr	r3, [pc, #176]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c6:	fa93 f3a3 	rbit	r3, r3
 80032ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80032cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032ce:	fab3 f383 	clz	r3, r3
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	461a      	mov	r2, r3
 80032d6:	4b26      	ldr	r3, [pc, #152]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032d8:	4413      	add	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	461a      	mov	r2, r3
 80032de:	2301      	movs	r3, #1
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ea:	fa93 f3a3 	rbit	r3, r3
 80032ee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80032f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032f2:	fab3 f383 	clz	r3, r3
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	461a      	mov	r2, r3
 80032fa:	4b1d      	ldr	r3, [pc, #116]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032fc:	4413      	add	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	461a      	mov	r2, r3
 8003302:	2300      	movs	r3, #0
 8003304:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003306:	4a18      	ldr	r2, [pc, #96]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800330a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800330c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d04b      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003316:	f7fd ff67 	bl	80011e8 <HAL_GetTick>
 800331a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800331c:	e00a      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800331e:	f7fd ff63 	bl	80011e8 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	f241 3288 	movw	r2, #5000	; 0x1388
 800332c:	4293      	cmp	r3, r2
 800332e:	d901      	bls.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e0f5      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003334:	2302      	movs	r3, #2
 8003336:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333a:	fa93 f3a3 	rbit	r3, r3
 800333e:	627b      	str	r3, [r7, #36]	; 0x24
 8003340:	2302      	movs	r3, #2
 8003342:	623b      	str	r3, [r7, #32]
 8003344:	6a3b      	ldr	r3, [r7, #32]
 8003346:	fa93 f3a3 	rbit	r3, r3
 800334a:	61fb      	str	r3, [r7, #28]
  return result;
 800334c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800334e:	fab3 f383 	clz	r3, r3
 8003352:	b2db      	uxtb	r3, r3
 8003354:	095b      	lsrs	r3, r3, #5
 8003356:	b2db      	uxtb	r3, r3
 8003358:	f043 0302 	orr.w	r3, r3, #2
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d108      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003362:	4b01      	ldr	r3, [pc, #4]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	e00d      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003368:	40021000 	.word	0x40021000
 800336c:	40007000 	.word	0x40007000
 8003370:	10908100 	.word	0x10908100
 8003374:	2302      	movs	r3, #2
 8003376:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	fa93 f3a3 	rbit	r3, r3
 800337e:	617b      	str	r3, [r7, #20]
 8003380:	4b69      	ldr	r3, [pc, #420]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003384:	2202      	movs	r2, #2
 8003386:	613a      	str	r2, [r7, #16]
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	fa92 f2a2 	rbit	r2, r2
 800338e:	60fa      	str	r2, [r7, #12]
  return result;
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	fab2 f282 	clz	r2, r2
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800339c:	b2d2      	uxtb	r2, r2
 800339e:	f002 021f 	and.w	r2, r2, #31
 80033a2:	2101      	movs	r1, #1
 80033a4:	fa01 f202 	lsl.w	r2, r1, r2
 80033a8:	4013      	ands	r3, r2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0b7      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80033ae:	4b5e      	ldr	r3, [pc, #376]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	495b      	ldr	r1, [pc, #364]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d105      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033c8:	4b57      	ldr	r3, [pc, #348]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033ca:	69db      	ldr	r3, [r3, #28]
 80033cc:	4a56      	ldr	r2, [pc, #344]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d008      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033e0:	4b51      	ldr	r3, [pc, #324]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e4:	f023 0203 	bic.w	r2, r3, #3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	494e      	ldr	r1, [pc, #312]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d008      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033fe:	4b4a      	ldr	r3, [pc, #296]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003402:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	4947      	ldr	r1, [pc, #284]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800340c:	4313      	orrs	r3, r2
 800340e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0304 	and.w	r3, r3, #4
 8003418:	2b00      	cmp	r3, #0
 800341a:	d008      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800341c:	4b42      	ldr	r3, [pc, #264]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800341e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003420:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	493f      	ldr	r1, [pc, #252]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800342a:	4313      	orrs	r3, r2
 800342c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0320 	and.w	r3, r3, #32
 8003436:	2b00      	cmp	r3, #0
 8003438:	d008      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800343a:	4b3b      	ldr	r3, [pc, #236]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	f023 0210 	bic.w	r2, r3, #16
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	4938      	ldr	r1, [pc, #224]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003448:	4313      	orrs	r3, r2
 800344a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d008      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003458:	4b33      	ldr	r3, [pc, #204]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003464:	4930      	ldr	r1, [pc, #192]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003466:	4313      	orrs	r3, r2
 8003468:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003472:	2b00      	cmp	r3, #0
 8003474:	d008      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003476:	4b2c      	ldr	r3, [pc, #176]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347a:	f023 0220 	bic.w	r2, r3, #32
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	4929      	ldr	r1, [pc, #164]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003484:	4313      	orrs	r3, r2
 8003486:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0308 	and.w	r3, r3, #8
 8003490:	2b00      	cmp	r3, #0
 8003492:	d008      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003494:	4b24      	ldr	r3, [pc, #144]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003498:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	4921      	ldr	r1, [pc, #132]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0310 	and.w	r3, r3, #16
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d008      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034b2:	4b1d      	ldr	r3, [pc, #116]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	491a      	ldr	r1, [pc, #104]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d008      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80034d0:	4b15      	ldr	r3, [pc, #84]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034dc:	4912      	ldr	r1, [pc, #72]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d008      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80034ee:	4b0e      	ldr	r3, [pc, #56]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fa:	490b      	ldr	r1, [pc, #44]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d008      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800350c:	4b06      	ldr	r3, [pc, #24]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800350e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003510:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003518:	4903      	ldr	r1, [pc, #12]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800351a:	4313      	orrs	r3, r2
 800351c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3748      	adds	r7, #72	; 0x48
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40021000 	.word	0x40021000

0800352c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e09d      	b.n	800367a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	2b00      	cmp	r3, #0
 8003544:	d108      	bne.n	8003558 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800354e:	d009      	beq.n	8003564 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	61da      	str	r2, [r3, #28]
 8003556:	e005      	b.n	8003564 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d106      	bne.n	8003584 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7fd fb5e 	bl	8000c40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2202      	movs	r2, #2
 8003588:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800359a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035a4:	d902      	bls.n	80035ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80035a6:	2300      	movs	r3, #0
 80035a8:	60fb      	str	r3, [r7, #12]
 80035aa:	e002      	b.n	80035b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80035ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80035ba:	d007      	beq.n	80035cc <HAL_SPI_Init+0xa0>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035c4:	d002      	beq.n	80035cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80035dc:	431a      	orrs	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	431a      	orrs	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	431a      	orrs	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035fa:	431a      	orrs	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	69db      	ldr	r3, [r3, #28]
 8003600:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003604:	431a      	orrs	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800360e:	ea42 0103 	orr.w	r1, r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003616:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	430a      	orrs	r2, r1
 8003620:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	0c1b      	lsrs	r3, r3, #16
 8003628:	f003 0204 	and.w	r2, r3, #4
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	f003 0310 	and.w	r3, r3, #16
 8003634:	431a      	orrs	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800363a:	f003 0308 	and.w	r3, r3, #8
 800363e:	431a      	orrs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003648:	ea42 0103 	orr.w	r1, r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	69da      	ldr	r2, [r3, #28]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003668:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b082      	sub	sp, #8
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d101      	bne.n	8003694 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e049      	b.n	8003728 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	d106      	bne.n	80036ae <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 f841 	bl	8003730 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2202      	movs	r2, #2
 80036b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	3304      	adds	r3, #4
 80036be:	4619      	mov	r1, r3
 80036c0:	4610      	mov	r0, r2
 80036c2:	f000 f9ad 	bl	8003a20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3708      	adds	r7, #8
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e049      	b.n	80037ea <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d106      	bne.n	8003770 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7fd faac 	bl	8000cc8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2202      	movs	r2, #2
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	3304      	adds	r3, #4
 8003780:	4619      	mov	r1, r3
 8003782:	4610      	mov	r0, r2
 8003784:	f000 f94c 	bl	8003a20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
	...

080037f4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003800:	2300      	movs	r3, #0
 8003802:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800380a:	2b01      	cmp	r3, #1
 800380c:	d101      	bne.n	8003812 <HAL_TIM_OC_ConfigChannel+0x1e>
 800380e:	2302      	movs	r3, #2
 8003810:	e066      	b.n	80038e0 <HAL_TIM_OC_ConfigChannel+0xec>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b14      	cmp	r3, #20
 800381e:	d857      	bhi.n	80038d0 <HAL_TIM_OC_ConfigChannel+0xdc>
 8003820:	a201      	add	r2, pc, #4	; (adr r2, 8003828 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003826:	bf00      	nop
 8003828:	0800387d 	.word	0x0800387d
 800382c:	080038d1 	.word	0x080038d1
 8003830:	080038d1 	.word	0x080038d1
 8003834:	080038d1 	.word	0x080038d1
 8003838:	0800388b 	.word	0x0800388b
 800383c:	080038d1 	.word	0x080038d1
 8003840:	080038d1 	.word	0x080038d1
 8003844:	080038d1 	.word	0x080038d1
 8003848:	08003899 	.word	0x08003899
 800384c:	080038d1 	.word	0x080038d1
 8003850:	080038d1 	.word	0x080038d1
 8003854:	080038d1 	.word	0x080038d1
 8003858:	080038a7 	.word	0x080038a7
 800385c:	080038d1 	.word	0x080038d1
 8003860:	080038d1 	.word	0x080038d1
 8003864:	080038d1 	.word	0x080038d1
 8003868:	080038b5 	.word	0x080038b5
 800386c:	080038d1 	.word	0x080038d1
 8003870:	080038d1 	.word	0x080038d1
 8003874:	080038d1 	.word	0x080038d1
 8003878:	080038c3 	.word	0x080038c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68b9      	ldr	r1, [r7, #8]
 8003882:	4618      	mov	r0, r3
 8003884:	f000 f94e 	bl	8003b24 <TIM_OC1_SetConfig>
      break;
 8003888:	e025      	b.n	80038d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68b9      	ldr	r1, [r7, #8]
 8003890:	4618      	mov	r0, r3
 8003892:	f000 f9cd 	bl	8003c30 <TIM_OC2_SetConfig>
      break;
 8003896:	e01e      	b.n	80038d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68b9      	ldr	r1, [r7, #8]
 800389e:	4618      	mov	r0, r3
 80038a0:	f000 fa46 	bl	8003d30 <TIM_OC3_SetConfig>
      break;
 80038a4:	e017      	b.n	80038d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68b9      	ldr	r1, [r7, #8]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f000 fabd 	bl	8003e2c <TIM_OC4_SetConfig>
      break;
 80038b2:	e010      	b.n	80038d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68b9      	ldr	r1, [r7, #8]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 fb1a 	bl	8003ef4 <TIM_OC5_SetConfig>
      break;
 80038c0:	e009      	b.n	80038d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68b9      	ldr	r1, [r7, #8]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 fb71 	bl	8003fb0 <TIM_OC6_SetConfig>
      break;
 80038ce:	e002      	b.n	80038d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	75fb      	strb	r3, [r7, #23]
      break;
 80038d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038de:	7dfb      	ldrb	r3, [r7, #23]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3718      	adds	r7, #24
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038f4:	2300      	movs	r3, #0
 80038f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d101      	bne.n	8003906 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003902:	2302      	movs	r3, #2
 8003904:	e088      	b.n	8003a18 <HAL_TIM_IC_ConfigChannel+0x130>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d11b      	bne.n	800394c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003924:	f000 fba4 	bl	8004070 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	699a      	ldr	r2, [r3, #24]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 020c 	bic.w	r2, r2, #12
 8003936:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6999      	ldr	r1, [r3, #24]
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	689a      	ldr	r2, [r3, #8]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	619a      	str	r2, [r3, #24]
 800394a:	e060      	b.n	8003a0e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b04      	cmp	r3, #4
 8003950:	d11c      	bne.n	800398c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003962:	f000 fbe7 	bl	8004134 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	699a      	ldr	r2, [r3, #24]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003974:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6999      	ldr	r1, [r3, #24]
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	021a      	lsls	r2, r3, #8
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	619a      	str	r2, [r3, #24]
 800398a:	e040      	b.n	8003a0e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b08      	cmp	r3, #8
 8003990:	d11b      	bne.n	80039ca <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80039a2:	f000 fc04 	bl	80041ae <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	69da      	ldr	r2, [r3, #28]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f022 020c 	bic.w	r2, r2, #12
 80039b4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	69d9      	ldr	r1, [r3, #28]
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	61da      	str	r2, [r3, #28]
 80039c8:	e021      	b.n	8003a0e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b0c      	cmp	r3, #12
 80039ce:	d11c      	bne.n	8003a0a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80039e0:	f000 fc21 	bl	8004226 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	69da      	ldr	r2, [r3, #28]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80039f2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	69d9      	ldr	r1, [r3, #28]
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	021a      	lsls	r2, r3, #8
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	430a      	orrs	r2, r1
 8003a06:	61da      	str	r2, [r3, #28]
 8003a08:	e001      	b.n	8003a0e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3718      	adds	r7, #24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a36      	ldr	r2, [pc, #216]	; (8003b0c <TIM_Base_SetConfig+0xec>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d00b      	beq.n	8003a50 <TIM_Base_SetConfig+0x30>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a3e:	d007      	beq.n	8003a50 <TIM_Base_SetConfig+0x30>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a33      	ldr	r2, [pc, #204]	; (8003b10 <TIM_Base_SetConfig+0xf0>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d003      	beq.n	8003a50 <TIM_Base_SetConfig+0x30>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a32      	ldr	r2, [pc, #200]	; (8003b14 <TIM_Base_SetConfig+0xf4>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d108      	bne.n	8003a62 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a29      	ldr	r2, [pc, #164]	; (8003b0c <TIM_Base_SetConfig+0xec>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d017      	beq.n	8003a9a <TIM_Base_SetConfig+0x7a>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a70:	d013      	beq.n	8003a9a <TIM_Base_SetConfig+0x7a>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a26      	ldr	r2, [pc, #152]	; (8003b10 <TIM_Base_SetConfig+0xf0>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d00f      	beq.n	8003a9a <TIM_Base_SetConfig+0x7a>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a25      	ldr	r2, [pc, #148]	; (8003b14 <TIM_Base_SetConfig+0xf4>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d00b      	beq.n	8003a9a <TIM_Base_SetConfig+0x7a>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a24      	ldr	r2, [pc, #144]	; (8003b18 <TIM_Base_SetConfig+0xf8>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d007      	beq.n	8003a9a <TIM_Base_SetConfig+0x7a>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a23      	ldr	r2, [pc, #140]	; (8003b1c <TIM_Base_SetConfig+0xfc>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d003      	beq.n	8003a9a <TIM_Base_SetConfig+0x7a>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a22      	ldr	r2, [pc, #136]	; (8003b20 <TIM_Base_SetConfig+0x100>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d108      	bne.n	8003aac <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a0e      	ldr	r2, [pc, #56]	; (8003b0c <TIM_Base_SetConfig+0xec>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d00b      	beq.n	8003af0 <TIM_Base_SetConfig+0xd0>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a0f      	ldr	r2, [pc, #60]	; (8003b18 <TIM_Base_SetConfig+0xf8>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d007      	beq.n	8003af0 <TIM_Base_SetConfig+0xd0>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a0e      	ldr	r2, [pc, #56]	; (8003b1c <TIM_Base_SetConfig+0xfc>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d003      	beq.n	8003af0 <TIM_Base_SetConfig+0xd0>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a0d      	ldr	r2, [pc, #52]	; (8003b20 <TIM_Base_SetConfig+0x100>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d103      	bne.n	8003af8 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	691a      	ldr	r2, [r3, #16]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	615a      	str	r2, [r3, #20]
}
 8003afe:	bf00      	nop
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	40012c00 	.word	0x40012c00
 8003b10:	40000400 	.word	0x40000400
 8003b14:	40000800 	.word	0x40000800
 8003b18:	40014000 	.word	0x40014000
 8003b1c:	40014400 	.word	0x40014400
 8003b20:	40014800 	.word	0x40014800

08003b24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b087      	sub	sp, #28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	f023 0201 	bic.w	r2, r3, #1
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f023 0303 	bic.w	r3, r3, #3
 8003b5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f023 0302 	bic.w	r3, r3, #2
 8003b70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a28      	ldr	r2, [pc, #160]	; (8003c20 <TIM_OC1_SetConfig+0xfc>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d00b      	beq.n	8003b9c <TIM_OC1_SetConfig+0x78>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a27      	ldr	r2, [pc, #156]	; (8003c24 <TIM_OC1_SetConfig+0x100>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d007      	beq.n	8003b9c <TIM_OC1_SetConfig+0x78>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a26      	ldr	r2, [pc, #152]	; (8003c28 <TIM_OC1_SetConfig+0x104>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d003      	beq.n	8003b9c <TIM_OC1_SetConfig+0x78>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a25      	ldr	r2, [pc, #148]	; (8003c2c <TIM_OC1_SetConfig+0x108>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d10c      	bne.n	8003bb6 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	f023 0308 	bic.w	r3, r3, #8
 8003ba2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f023 0304 	bic.w	r3, r3, #4
 8003bb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a19      	ldr	r2, [pc, #100]	; (8003c20 <TIM_OC1_SetConfig+0xfc>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d00b      	beq.n	8003bd6 <TIM_OC1_SetConfig+0xb2>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a18      	ldr	r2, [pc, #96]	; (8003c24 <TIM_OC1_SetConfig+0x100>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d007      	beq.n	8003bd6 <TIM_OC1_SetConfig+0xb2>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a17      	ldr	r2, [pc, #92]	; (8003c28 <TIM_OC1_SetConfig+0x104>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d003      	beq.n	8003bd6 <TIM_OC1_SetConfig+0xb2>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a16      	ldr	r2, [pc, #88]	; (8003c2c <TIM_OC1_SetConfig+0x108>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d111      	bne.n	8003bfa <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003be4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	621a      	str	r2, [r3, #32]
}
 8003c14:	bf00      	nop
 8003c16:	371c      	adds	r7, #28
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	40012c00 	.word	0x40012c00
 8003c24:	40014000 	.word	0x40014000
 8003c28:	40014400 	.word	0x40014400
 8003c2c:	40014800 	.word	0x40014800

08003c30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b087      	sub	sp, #28
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	f023 0210 	bic.w	r2, r3, #16
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	021b      	lsls	r3, r3, #8
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	f023 0320 	bic.w	r3, r3, #32
 8003c7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	011b      	lsls	r3, r3, #4
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a24      	ldr	r2, [pc, #144]	; (8003d20 <TIM_OC2_SetConfig+0xf0>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d10d      	bne.n	8003cb0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	011b      	lsls	r3, r3, #4
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a1b      	ldr	r2, [pc, #108]	; (8003d20 <TIM_OC2_SetConfig+0xf0>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d00b      	beq.n	8003cd0 <TIM_OC2_SetConfig+0xa0>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a1a      	ldr	r2, [pc, #104]	; (8003d24 <TIM_OC2_SetConfig+0xf4>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d007      	beq.n	8003cd0 <TIM_OC2_SetConfig+0xa0>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a19      	ldr	r2, [pc, #100]	; (8003d28 <TIM_OC2_SetConfig+0xf8>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d003      	beq.n	8003cd0 <TIM_OC2_SetConfig+0xa0>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a18      	ldr	r2, [pc, #96]	; (8003d2c <TIM_OC2_SetConfig+0xfc>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d113      	bne.n	8003cf8 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cd6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cde:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	621a      	str	r2, [r3, #32]
}
 8003d12:	bf00      	nop
 8003d14:	371c      	adds	r7, #28
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	40012c00 	.word	0x40012c00
 8003d24:	40014000 	.word	0x40014000
 8003d28:	40014400 	.word	0x40014400
 8003d2c:	40014800 	.word	0x40014800

08003d30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b087      	sub	sp, #28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f023 0303 	bic.w	r3, r3, #3
 8003d6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	021b      	lsls	r3, r3, #8
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a23      	ldr	r2, [pc, #140]	; (8003e1c <TIM_OC3_SetConfig+0xec>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d10d      	bne.n	8003dae <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	021b      	lsls	r3, r3, #8
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dac:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a1a      	ldr	r2, [pc, #104]	; (8003e1c <TIM_OC3_SetConfig+0xec>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d00b      	beq.n	8003dce <TIM_OC3_SetConfig+0x9e>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a19      	ldr	r2, [pc, #100]	; (8003e20 <TIM_OC3_SetConfig+0xf0>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d007      	beq.n	8003dce <TIM_OC3_SetConfig+0x9e>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a18      	ldr	r2, [pc, #96]	; (8003e24 <TIM_OC3_SetConfig+0xf4>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d003      	beq.n	8003dce <TIM_OC3_SetConfig+0x9e>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a17      	ldr	r2, [pc, #92]	; (8003e28 <TIM_OC3_SetConfig+0xf8>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d113      	bne.n	8003df6 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	011b      	lsls	r3, r3, #4
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	011b      	lsls	r3, r3, #4
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685a      	ldr	r2, [r3, #4]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	621a      	str	r2, [r3, #32]
}
 8003e10:	bf00      	nop
 8003e12:	371c      	adds	r7, #28
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr
 8003e1c:	40012c00 	.word	0x40012c00
 8003e20:	40014000 	.word	0x40014000
 8003e24:	40014400 	.word	0x40014400
 8003e28:	40014800 	.word	0x40014800

08003e2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	021b      	lsls	r3, r3, #8
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	031b      	lsls	r3, r3, #12
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a16      	ldr	r2, [pc, #88]	; (8003ee4 <TIM_OC4_SetConfig+0xb8>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d00b      	beq.n	8003ea8 <TIM_OC4_SetConfig+0x7c>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a15      	ldr	r2, [pc, #84]	; (8003ee8 <TIM_OC4_SetConfig+0xbc>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d007      	beq.n	8003ea8 <TIM_OC4_SetConfig+0x7c>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a14      	ldr	r2, [pc, #80]	; (8003eec <TIM_OC4_SetConfig+0xc0>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d003      	beq.n	8003ea8 <TIM_OC4_SetConfig+0x7c>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a13      	ldr	r2, [pc, #76]	; (8003ef0 <TIM_OC4_SetConfig+0xc4>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d109      	bne.n	8003ebc <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003eae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	019b      	lsls	r3, r3, #6
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	621a      	str	r2, [r3, #32]
}
 8003ed6:	bf00      	nop
 8003ed8:	371c      	adds	r7, #28
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	40012c00 	.word	0x40012c00
 8003ee8:	40014000 	.word	0x40014000
 8003eec:	40014400 	.word	0x40014400
 8003ef0:	40014800 	.word	0x40014800

08003ef4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b087      	sub	sp, #28
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003f38:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	041b      	lsls	r3, r3, #16
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a15      	ldr	r2, [pc, #84]	; (8003fa0 <TIM_OC5_SetConfig+0xac>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d00b      	beq.n	8003f66 <TIM_OC5_SetConfig+0x72>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a14      	ldr	r2, [pc, #80]	; (8003fa4 <TIM_OC5_SetConfig+0xb0>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d007      	beq.n	8003f66 <TIM_OC5_SetConfig+0x72>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a13      	ldr	r2, [pc, #76]	; (8003fa8 <TIM_OC5_SetConfig+0xb4>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d003      	beq.n	8003f66 <TIM_OC5_SetConfig+0x72>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a12      	ldr	r2, [pc, #72]	; (8003fac <TIM_OC5_SetConfig+0xb8>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d109      	bne.n	8003f7a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	021b      	lsls	r3, r3, #8
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685a      	ldr	r2, [r3, #4]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	621a      	str	r2, [r3, #32]
}
 8003f94:	bf00      	nop
 8003f96:	371c      	adds	r7, #28
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr
 8003fa0:	40012c00 	.word	0x40012c00
 8003fa4:	40014000 	.word	0x40014000
 8003fa8:	40014400 	.word	0x40014400
 8003fac:	40014800 	.word	0x40014800

08003fb0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b087      	sub	sp, #28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	021b      	lsls	r3, r3, #8
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ff6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	051b      	lsls	r3, r3, #20
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	4313      	orrs	r3, r2
 8004002:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a16      	ldr	r2, [pc, #88]	; (8004060 <TIM_OC6_SetConfig+0xb0>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d00b      	beq.n	8004024 <TIM_OC6_SetConfig+0x74>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a15      	ldr	r2, [pc, #84]	; (8004064 <TIM_OC6_SetConfig+0xb4>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d007      	beq.n	8004024 <TIM_OC6_SetConfig+0x74>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a14      	ldr	r2, [pc, #80]	; (8004068 <TIM_OC6_SetConfig+0xb8>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d003      	beq.n	8004024 <TIM_OC6_SetConfig+0x74>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a13      	ldr	r2, [pc, #76]	; (800406c <TIM_OC6_SetConfig+0xbc>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d109      	bne.n	8004038 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800402a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	029b      	lsls	r3, r3, #10
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	4313      	orrs	r3, r2
 8004036:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	621a      	str	r2, [r3, #32]
}
 8004052:	bf00      	nop
 8004054:	371c      	adds	r7, #28
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	40012c00 	.word	0x40012c00
 8004064:	40014000 	.word	0x40014000
 8004068:	40014400 	.word	0x40014400
 800406c:	40014800 	.word	0x40014800

08004070 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004070:	b480      	push	{r7}
 8004072:	b087      	sub	sp, #28
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
 800407c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	f023 0201 	bic.w	r2, r3, #1
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	4a22      	ldr	r2, [pc, #136]	; (8004124 <TIM_TI1_SetConfig+0xb4>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d00f      	beq.n	80040be <TIM_TI1_SetConfig+0x4e>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040a4:	d00b      	beq.n	80040be <TIM_TI1_SetConfig+0x4e>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	4a1f      	ldr	r2, [pc, #124]	; (8004128 <TIM_TI1_SetConfig+0xb8>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d007      	beq.n	80040be <TIM_TI1_SetConfig+0x4e>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	4a1e      	ldr	r2, [pc, #120]	; (800412c <TIM_TI1_SetConfig+0xbc>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d003      	beq.n	80040be <TIM_TI1_SetConfig+0x4e>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	4a1d      	ldr	r2, [pc, #116]	; (8004130 <TIM_TI1_SetConfig+0xc0>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d101      	bne.n	80040c2 <TIM_TI1_SetConfig+0x52>
 80040be:	2301      	movs	r3, #1
 80040c0:	e000      	b.n	80040c4 <TIM_TI1_SetConfig+0x54>
 80040c2:	2300      	movs	r3, #0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d008      	beq.n	80040da <TIM_TI1_SetConfig+0x6a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f023 0303 	bic.w	r3, r3, #3
 80040ce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	617b      	str	r3, [r7, #20]
 80040d8:	e003      	b.n	80040e2 <TIM_TI1_SetConfig+0x72>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f043 0301 	orr.w	r3, r3, #1
 80040e0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	011b      	lsls	r3, r3, #4
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	f023 030a 	bic.w	r3, r3, #10
 80040fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	f003 030a 	and.w	r3, r3, #10
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	4313      	orrs	r3, r2
 8004108:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	621a      	str	r2, [r3, #32]
}
 8004116:	bf00      	nop
 8004118:	371c      	adds	r7, #28
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	40012c00 	.word	0x40012c00
 8004128:	40000400 	.word	0x40000400
 800412c:	40000800 	.word	0x40000800
 8004130:	40014000 	.word	0x40014000

08004134 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004134:	b480      	push	{r7}
 8004136:	b087      	sub	sp, #28
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
 8004140:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	f023 0210 	bic.w	r2, r3, #16
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6a1b      	ldr	r3, [r3, #32]
 8004158:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004160:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	021b      	lsls	r3, r3, #8
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	4313      	orrs	r3, r2
 800416a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004172:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	031b      	lsls	r3, r3, #12
 8004178:	b29b      	uxth	r3, r3
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	4313      	orrs	r3, r2
 800417e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004186:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	011b      	lsls	r3, r3, #4
 800418c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	4313      	orrs	r3, r2
 8004194:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	621a      	str	r2, [r3, #32]
}
 80041a2:	bf00      	nop
 80041a4:	371c      	adds	r7, #28
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b087      	sub	sp, #28
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	60f8      	str	r0, [r7, #12]
 80041b6:	60b9      	str	r1, [r7, #8]
 80041b8:	607a      	str	r2, [r7, #4]
 80041ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	69db      	ldr	r3, [r3, #28]
 80041cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f023 0303 	bic.w	r3, r3, #3
 80041da:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041ea:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	011b      	lsls	r3, r3, #4
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80041fe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	021b      	lsls	r3, r3, #8
 8004204:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	4313      	orrs	r3, r2
 800420c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	621a      	str	r2, [r3, #32]
}
 800421a:	bf00      	nop
 800421c:	371c      	adds	r7, #28
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004226:	b480      	push	{r7}
 8004228:	b087      	sub	sp, #28
 800422a:	af00      	add	r7, sp, #0
 800422c:	60f8      	str	r0, [r7, #12]
 800422e:	60b9      	str	r1, [r7, #8]
 8004230:	607a      	str	r2, [r7, #4]
 8004232:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	69db      	ldr	r3, [r3, #28]
 8004244:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004252:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	021b      	lsls	r3, r3, #8
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	4313      	orrs	r3, r2
 800425c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004264:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	031b      	lsls	r3, r3, #12
 800426a:	b29b      	uxth	r3, r3
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	4313      	orrs	r3, r2
 8004270:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004278:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	031b      	lsls	r3, r3, #12
 800427e:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	4313      	orrs	r3, r2
 8004286:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	621a      	str	r2, [r3, #32]
}
 8004294:	bf00      	nop
 8004296:	371c      	adds	r7, #28
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d101      	bne.n	80042b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042b4:	2302      	movs	r3, #2
 80042b6:	e059      	b.n	800436c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2202      	movs	r2, #2
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a26      	ldr	r2, [pc, #152]	; (8004378 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d108      	bne.n	80042f4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80042e8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	4313      	orrs	r3, r2
 8004304:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a19      	ldr	r2, [pc, #100]	; (8004378 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d013      	beq.n	8004340 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004320:	d00e      	beq.n	8004340 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a15      	ldr	r2, [pc, #84]	; (800437c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d009      	beq.n	8004340 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a13      	ldr	r2, [pc, #76]	; (8004380 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d004      	beq.n	8004340 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a12      	ldr	r2, [pc, #72]	; (8004384 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d10c      	bne.n	800435a <HAL_TIMEx_MasterConfigSynchronization+0xba>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004346:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	4313      	orrs	r3, r2
 8004350:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3714      	adds	r7, #20
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr
 8004378:	40012c00 	.word	0x40012c00
 800437c:	40000400 	.word	0x40000400
 8004380:	40000800 	.word	0x40000800
 8004384:	40014000 	.word	0x40014000

08004388 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004392:	2300      	movs	r3, #0
 8004394:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800439c:	2b01      	cmp	r3, #1
 800439e:	d101      	bne.n	80043a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80043a0:	2302      	movs	r3, #2
 80043a2:	e060      	b.n	8004466 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440a:	4313      	orrs	r3, r2
 800440c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	041b      	lsls	r3, r3, #16
 800441a:	4313      	orrs	r3, r2
 800441c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a14      	ldr	r2, [pc, #80]	; (8004474 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d115      	bne.n	8004454 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004432:	051b      	lsls	r3, r3, #20
 8004434:	4313      	orrs	r3, r2
 8004436:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	4313      	orrs	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	6a1b      	ldr	r3, [r3, #32]
 8004450:	4313      	orrs	r3, r2
 8004452:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	40012c00 	.word	0x40012c00

08004478 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e040      	b.n	800450c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800448e:	2b00      	cmp	r3, #0
 8004490:	d106      	bne.n	80044a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f7fc fc90 	bl	8000dc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2224      	movs	r2, #36	; 0x24
 80044a4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 0201 	bic.w	r2, r2, #1
 80044b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f82c 	bl	8004514 <UART_SetConfig>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d101      	bne.n	80044c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e022      	b.n	800450c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d002      	beq.n	80044d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 f9f4 	bl	80048bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689a      	ldr	r2, [r3, #8]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0201 	orr.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 fa7b 	bl	8004a00 <UART_CheckIdleState>
 800450a:	4603      	mov	r3, r0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3708      	adds	r7, #8
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b088      	sub	sp, #32
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800451c:	2300      	movs	r3, #0
 800451e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689a      	ldr	r2, [r3, #8]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	431a      	orrs	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	431a      	orrs	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	69db      	ldr	r3, [r3, #28]
 8004534:	4313      	orrs	r3, r2
 8004536:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004542:	f023 030c 	bic.w	r3, r3, #12
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6812      	ldr	r2, [r2, #0]
 800454a:	6979      	ldr	r1, [r7, #20]
 800454c:	430b      	orrs	r3, r1
 800454e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68da      	ldr	r2, [r3, #12]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	430a      	orrs	r2, r1
 8004564:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	4313      	orrs	r3, r2
 8004574:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	430a      	orrs	r2, r1
 8004588:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4aa7      	ldr	r2, [pc, #668]	; (800482c <UART_SetConfig+0x318>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d120      	bne.n	80045d6 <UART_SetConfig+0xc2>
 8004594:	4ba6      	ldr	r3, [pc, #664]	; (8004830 <UART_SetConfig+0x31c>)
 8004596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004598:	f003 0303 	and.w	r3, r3, #3
 800459c:	2b03      	cmp	r3, #3
 800459e:	d817      	bhi.n	80045d0 <UART_SetConfig+0xbc>
 80045a0:	a201      	add	r2, pc, #4	; (adr r2, 80045a8 <UART_SetConfig+0x94>)
 80045a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a6:	bf00      	nop
 80045a8:	080045b9 	.word	0x080045b9
 80045ac:	080045c5 	.word	0x080045c5
 80045b0:	080045cb 	.word	0x080045cb
 80045b4:	080045bf 	.word	0x080045bf
 80045b8:	2301      	movs	r3, #1
 80045ba:	77fb      	strb	r3, [r7, #31]
 80045bc:	e0b5      	b.n	800472a <UART_SetConfig+0x216>
 80045be:	2302      	movs	r3, #2
 80045c0:	77fb      	strb	r3, [r7, #31]
 80045c2:	e0b2      	b.n	800472a <UART_SetConfig+0x216>
 80045c4:	2304      	movs	r3, #4
 80045c6:	77fb      	strb	r3, [r7, #31]
 80045c8:	e0af      	b.n	800472a <UART_SetConfig+0x216>
 80045ca:	2308      	movs	r3, #8
 80045cc:	77fb      	strb	r3, [r7, #31]
 80045ce:	e0ac      	b.n	800472a <UART_SetConfig+0x216>
 80045d0:	2310      	movs	r3, #16
 80045d2:	77fb      	strb	r3, [r7, #31]
 80045d4:	e0a9      	b.n	800472a <UART_SetConfig+0x216>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a96      	ldr	r2, [pc, #600]	; (8004834 <UART_SetConfig+0x320>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d124      	bne.n	800462a <UART_SetConfig+0x116>
 80045e0:	4b93      	ldr	r3, [pc, #588]	; (8004830 <UART_SetConfig+0x31c>)
 80045e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80045ec:	d011      	beq.n	8004612 <UART_SetConfig+0xfe>
 80045ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80045f2:	d817      	bhi.n	8004624 <UART_SetConfig+0x110>
 80045f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045f8:	d011      	beq.n	800461e <UART_SetConfig+0x10a>
 80045fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045fe:	d811      	bhi.n	8004624 <UART_SetConfig+0x110>
 8004600:	2b00      	cmp	r3, #0
 8004602:	d003      	beq.n	800460c <UART_SetConfig+0xf8>
 8004604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004608:	d006      	beq.n	8004618 <UART_SetConfig+0x104>
 800460a:	e00b      	b.n	8004624 <UART_SetConfig+0x110>
 800460c:	2300      	movs	r3, #0
 800460e:	77fb      	strb	r3, [r7, #31]
 8004610:	e08b      	b.n	800472a <UART_SetConfig+0x216>
 8004612:	2302      	movs	r3, #2
 8004614:	77fb      	strb	r3, [r7, #31]
 8004616:	e088      	b.n	800472a <UART_SetConfig+0x216>
 8004618:	2304      	movs	r3, #4
 800461a:	77fb      	strb	r3, [r7, #31]
 800461c:	e085      	b.n	800472a <UART_SetConfig+0x216>
 800461e:	2308      	movs	r3, #8
 8004620:	77fb      	strb	r3, [r7, #31]
 8004622:	e082      	b.n	800472a <UART_SetConfig+0x216>
 8004624:	2310      	movs	r3, #16
 8004626:	77fb      	strb	r3, [r7, #31]
 8004628:	e07f      	b.n	800472a <UART_SetConfig+0x216>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a82      	ldr	r2, [pc, #520]	; (8004838 <UART_SetConfig+0x324>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d124      	bne.n	800467e <UART_SetConfig+0x16a>
 8004634:	4b7e      	ldr	r3, [pc, #504]	; (8004830 <UART_SetConfig+0x31c>)
 8004636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004638:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800463c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004640:	d011      	beq.n	8004666 <UART_SetConfig+0x152>
 8004642:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004646:	d817      	bhi.n	8004678 <UART_SetConfig+0x164>
 8004648:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800464c:	d011      	beq.n	8004672 <UART_SetConfig+0x15e>
 800464e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004652:	d811      	bhi.n	8004678 <UART_SetConfig+0x164>
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <UART_SetConfig+0x14c>
 8004658:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800465c:	d006      	beq.n	800466c <UART_SetConfig+0x158>
 800465e:	e00b      	b.n	8004678 <UART_SetConfig+0x164>
 8004660:	2300      	movs	r3, #0
 8004662:	77fb      	strb	r3, [r7, #31]
 8004664:	e061      	b.n	800472a <UART_SetConfig+0x216>
 8004666:	2302      	movs	r3, #2
 8004668:	77fb      	strb	r3, [r7, #31]
 800466a:	e05e      	b.n	800472a <UART_SetConfig+0x216>
 800466c:	2304      	movs	r3, #4
 800466e:	77fb      	strb	r3, [r7, #31]
 8004670:	e05b      	b.n	800472a <UART_SetConfig+0x216>
 8004672:	2308      	movs	r3, #8
 8004674:	77fb      	strb	r3, [r7, #31]
 8004676:	e058      	b.n	800472a <UART_SetConfig+0x216>
 8004678:	2310      	movs	r3, #16
 800467a:	77fb      	strb	r3, [r7, #31]
 800467c:	e055      	b.n	800472a <UART_SetConfig+0x216>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a6e      	ldr	r2, [pc, #440]	; (800483c <UART_SetConfig+0x328>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d124      	bne.n	80046d2 <UART_SetConfig+0x1be>
 8004688:	4b69      	ldr	r3, [pc, #420]	; (8004830 <UART_SetConfig+0x31c>)
 800468a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004690:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004694:	d011      	beq.n	80046ba <UART_SetConfig+0x1a6>
 8004696:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800469a:	d817      	bhi.n	80046cc <UART_SetConfig+0x1b8>
 800469c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046a0:	d011      	beq.n	80046c6 <UART_SetConfig+0x1b2>
 80046a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046a6:	d811      	bhi.n	80046cc <UART_SetConfig+0x1b8>
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d003      	beq.n	80046b4 <UART_SetConfig+0x1a0>
 80046ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046b0:	d006      	beq.n	80046c0 <UART_SetConfig+0x1ac>
 80046b2:	e00b      	b.n	80046cc <UART_SetConfig+0x1b8>
 80046b4:	2300      	movs	r3, #0
 80046b6:	77fb      	strb	r3, [r7, #31]
 80046b8:	e037      	b.n	800472a <UART_SetConfig+0x216>
 80046ba:	2302      	movs	r3, #2
 80046bc:	77fb      	strb	r3, [r7, #31]
 80046be:	e034      	b.n	800472a <UART_SetConfig+0x216>
 80046c0:	2304      	movs	r3, #4
 80046c2:	77fb      	strb	r3, [r7, #31]
 80046c4:	e031      	b.n	800472a <UART_SetConfig+0x216>
 80046c6:	2308      	movs	r3, #8
 80046c8:	77fb      	strb	r3, [r7, #31]
 80046ca:	e02e      	b.n	800472a <UART_SetConfig+0x216>
 80046cc:	2310      	movs	r3, #16
 80046ce:	77fb      	strb	r3, [r7, #31]
 80046d0:	e02b      	b.n	800472a <UART_SetConfig+0x216>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a5a      	ldr	r2, [pc, #360]	; (8004840 <UART_SetConfig+0x32c>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d124      	bne.n	8004726 <UART_SetConfig+0x212>
 80046dc:	4b54      	ldr	r3, [pc, #336]	; (8004830 <UART_SetConfig+0x31c>)
 80046de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80046e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80046e8:	d011      	beq.n	800470e <UART_SetConfig+0x1fa>
 80046ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80046ee:	d817      	bhi.n	8004720 <UART_SetConfig+0x20c>
 80046f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046f4:	d011      	beq.n	800471a <UART_SetConfig+0x206>
 80046f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046fa:	d811      	bhi.n	8004720 <UART_SetConfig+0x20c>
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d003      	beq.n	8004708 <UART_SetConfig+0x1f4>
 8004700:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004704:	d006      	beq.n	8004714 <UART_SetConfig+0x200>
 8004706:	e00b      	b.n	8004720 <UART_SetConfig+0x20c>
 8004708:	2300      	movs	r3, #0
 800470a:	77fb      	strb	r3, [r7, #31]
 800470c:	e00d      	b.n	800472a <UART_SetConfig+0x216>
 800470e:	2302      	movs	r3, #2
 8004710:	77fb      	strb	r3, [r7, #31]
 8004712:	e00a      	b.n	800472a <UART_SetConfig+0x216>
 8004714:	2304      	movs	r3, #4
 8004716:	77fb      	strb	r3, [r7, #31]
 8004718:	e007      	b.n	800472a <UART_SetConfig+0x216>
 800471a:	2308      	movs	r3, #8
 800471c:	77fb      	strb	r3, [r7, #31]
 800471e:	e004      	b.n	800472a <UART_SetConfig+0x216>
 8004720:	2310      	movs	r3, #16
 8004722:	77fb      	strb	r3, [r7, #31]
 8004724:	e001      	b.n	800472a <UART_SetConfig+0x216>
 8004726:	2310      	movs	r3, #16
 8004728:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	69db      	ldr	r3, [r3, #28]
 800472e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004732:	d15b      	bne.n	80047ec <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8004734:	7ffb      	ldrb	r3, [r7, #31]
 8004736:	2b08      	cmp	r3, #8
 8004738:	d827      	bhi.n	800478a <UART_SetConfig+0x276>
 800473a:	a201      	add	r2, pc, #4	; (adr r2, 8004740 <UART_SetConfig+0x22c>)
 800473c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004740:	08004765 	.word	0x08004765
 8004744:	0800476d 	.word	0x0800476d
 8004748:	08004775 	.word	0x08004775
 800474c:	0800478b 	.word	0x0800478b
 8004750:	0800477b 	.word	0x0800477b
 8004754:	0800478b 	.word	0x0800478b
 8004758:	0800478b 	.word	0x0800478b
 800475c:	0800478b 	.word	0x0800478b
 8004760:	08004783 	.word	0x08004783
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004764:	f7fe fd0c 	bl	8003180 <HAL_RCC_GetPCLK1Freq>
 8004768:	61b8      	str	r0, [r7, #24]
        break;
 800476a:	e013      	b.n	8004794 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800476c:	f7fe fd2a 	bl	80031c4 <HAL_RCC_GetPCLK2Freq>
 8004770:	61b8      	str	r0, [r7, #24]
        break;
 8004772:	e00f      	b.n	8004794 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004774:	4b33      	ldr	r3, [pc, #204]	; (8004844 <UART_SetConfig+0x330>)
 8004776:	61bb      	str	r3, [r7, #24]
        break;
 8004778:	e00c      	b.n	8004794 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800477a:	f7fe fc8b 	bl	8003094 <HAL_RCC_GetSysClockFreq>
 800477e:	61b8      	str	r0, [r7, #24]
        break;
 8004780:	e008      	b.n	8004794 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004782:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004786:	61bb      	str	r3, [r7, #24]
        break;
 8004788:	e004      	b.n	8004794 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800478a:	2300      	movs	r3, #0
 800478c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	77bb      	strb	r3, [r7, #30]
        break;
 8004792:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	2b00      	cmp	r3, #0
 8004798:	f000 8082 	beq.w	80048a0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	005a      	lsls	r2, r3, #1
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	085b      	lsrs	r3, r3, #1
 80047a6:	441a      	add	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	2b0f      	cmp	r3, #15
 80047b6:	d916      	bls.n	80047e6 <UART_SetConfig+0x2d2>
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047be:	d212      	bcs.n	80047e6 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	f023 030f 	bic.w	r3, r3, #15
 80047c8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	085b      	lsrs	r3, r3, #1
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	f003 0307 	and.w	r3, r3, #7
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	89fb      	ldrh	r3, [r7, #14]
 80047d8:	4313      	orrs	r3, r2
 80047da:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	89fa      	ldrh	r2, [r7, #14]
 80047e2:	60da      	str	r2, [r3, #12]
 80047e4:	e05c      	b.n	80048a0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	77bb      	strb	r3, [r7, #30]
 80047ea:	e059      	b.n	80048a0 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047ec:	7ffb      	ldrb	r3, [r7, #31]
 80047ee:	2b08      	cmp	r3, #8
 80047f0:	d835      	bhi.n	800485e <UART_SetConfig+0x34a>
 80047f2:	a201      	add	r2, pc, #4	; (adr r2, 80047f8 <UART_SetConfig+0x2e4>)
 80047f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f8:	0800481d 	.word	0x0800481d
 80047fc:	08004825 	.word	0x08004825
 8004800:	08004849 	.word	0x08004849
 8004804:	0800485f 	.word	0x0800485f
 8004808:	0800484f 	.word	0x0800484f
 800480c:	0800485f 	.word	0x0800485f
 8004810:	0800485f 	.word	0x0800485f
 8004814:	0800485f 	.word	0x0800485f
 8004818:	08004857 	.word	0x08004857
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800481c:	f7fe fcb0 	bl	8003180 <HAL_RCC_GetPCLK1Freq>
 8004820:	61b8      	str	r0, [r7, #24]
        break;
 8004822:	e021      	b.n	8004868 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004824:	f7fe fcce 	bl	80031c4 <HAL_RCC_GetPCLK2Freq>
 8004828:	61b8      	str	r0, [r7, #24]
        break;
 800482a:	e01d      	b.n	8004868 <UART_SetConfig+0x354>
 800482c:	40013800 	.word	0x40013800
 8004830:	40021000 	.word	0x40021000
 8004834:	40004400 	.word	0x40004400
 8004838:	40004800 	.word	0x40004800
 800483c:	40004c00 	.word	0x40004c00
 8004840:	40005000 	.word	0x40005000
 8004844:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004848:	4b1b      	ldr	r3, [pc, #108]	; (80048b8 <UART_SetConfig+0x3a4>)
 800484a:	61bb      	str	r3, [r7, #24]
        break;
 800484c:	e00c      	b.n	8004868 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800484e:	f7fe fc21 	bl	8003094 <HAL_RCC_GetSysClockFreq>
 8004852:	61b8      	str	r0, [r7, #24]
        break;
 8004854:	e008      	b.n	8004868 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800485a:	61bb      	str	r3, [r7, #24]
        break;
 800485c:	e004      	b.n	8004868 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800485e:	2300      	movs	r3, #0
 8004860:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	77bb      	strb	r3, [r7, #30]
        break;
 8004866:	bf00      	nop
    }

    if (pclk != 0U)
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d018      	beq.n	80048a0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	085a      	lsrs	r2, r3, #1
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	441a      	add	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004880:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	2b0f      	cmp	r3, #15
 8004886:	d909      	bls.n	800489c <UART_SetConfig+0x388>
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800488e:	d205      	bcs.n	800489c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	b29a      	uxth	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	60da      	str	r2, [r3, #12]
 800489a:	e001      	b.n	80048a0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80048ac:	7fbb      	ldrb	r3, [r7, #30]
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3720      	adds	r7, #32
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	007a1200 	.word	0x007a1200

080048bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00a      	beq.n	80048e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00a      	beq.n	8004908 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490c:	f003 0304 	and.w	r3, r3, #4
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00a      	beq.n	800492a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	430a      	orrs	r2, r1
 8004928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	f003 0308 	and.w	r3, r3, #8
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00a      	beq.n	800494c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	430a      	orrs	r2, r1
 800494a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004950:	f003 0310 	and.w	r3, r3, #16
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00a      	beq.n	800496e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	430a      	orrs	r2, r1
 800496c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004972:	f003 0320 	and.w	r3, r3, #32
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00a      	beq.n	8004990 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	430a      	orrs	r2, r1
 800498e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004998:	2b00      	cmp	r3, #0
 800499a:	d01a      	beq.n	80049d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049ba:	d10a      	bne.n	80049d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00a      	beq.n	80049f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	430a      	orrs	r2, r1
 80049f2:	605a      	str	r2, [r3, #4]
  }
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b098      	sub	sp, #96	; 0x60
 8004a04:	af02      	add	r7, sp, #8
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a10:	f7fc fbea 	bl	80011e8 <HAL_GetTick>
 8004a14:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0308 	and.w	r3, r3, #8
 8004a20:	2b08      	cmp	r3, #8
 8004a22:	d12e      	bne.n	8004a82 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f88c 	bl	8004b50 <UART_WaitOnFlagUntilTimeout>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d021      	beq.n	8004a82 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a46:	e853 3f00 	ldrex	r3, [r3]
 8004a4a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a52:	653b      	str	r3, [r7, #80]	; 0x50
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	461a      	mov	r2, r3
 8004a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a5c:	647b      	str	r3, [r7, #68]	; 0x44
 8004a5e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a64:	e841 2300 	strex	r3, r2, [r1]
 8004a68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1e6      	bne.n	8004a3e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2220      	movs	r2, #32
 8004a74:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e062      	b.n	8004b48 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0304 	and.w	r3, r3, #4
 8004a8c:	2b04      	cmp	r3, #4
 8004a8e:	d149      	bne.n	8004b24 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a94:	9300      	str	r3, [sp, #0]
 8004a96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f856 	bl	8004b50 <UART_WaitOnFlagUntilTimeout>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d03c      	beq.n	8004b24 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab2:	e853 3f00 	ldrex	r3, [r3]
 8004ab6:	623b      	str	r3, [r7, #32]
   return(result);
 8004ab8:	6a3b      	ldr	r3, [r7, #32]
 8004aba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004abe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ac8:	633b      	str	r3, [r7, #48]	; 0x30
 8004aca:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004acc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ace:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ad0:	e841 2300 	strex	r3, r2, [r1]
 8004ad4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1e6      	bne.n	8004aaa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	3308      	adds	r3, #8
 8004ae2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	e853 3f00 	ldrex	r3, [r3]
 8004aea:	60fb      	str	r3, [r7, #12]
   return(result);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f023 0301 	bic.w	r3, r3, #1
 8004af2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	3308      	adds	r3, #8
 8004afa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004afc:	61fa      	str	r2, [r7, #28]
 8004afe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b00:	69b9      	ldr	r1, [r7, #24]
 8004b02:	69fa      	ldr	r2, [r7, #28]
 8004b04:	e841 2300 	strex	r3, r2, [r1]
 8004b08:	617b      	str	r3, [r7, #20]
   return(result);
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1e5      	bne.n	8004adc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2220      	movs	r2, #32
 8004b14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e011      	b.n	8004b48 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2220      	movs	r2, #32
 8004b28:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3758      	adds	r7, #88	; 0x58
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	603b      	str	r3, [r7, #0]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b60:	e049      	b.n	8004bf6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b68:	d045      	beq.n	8004bf6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b6a:	f7fc fb3d 	bl	80011e8 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d302      	bcc.n	8004b80 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d101      	bne.n	8004b84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e048      	b.n	8004c16 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0304 	and.w	r3, r3, #4
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d031      	beq.n	8004bf6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	69db      	ldr	r3, [r3, #28]
 8004b98:	f003 0308 	and.w	r3, r3, #8
 8004b9c:	2b08      	cmp	r3, #8
 8004b9e:	d110      	bne.n	8004bc2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2208      	movs	r2, #8
 8004ba6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 f838 	bl	8004c1e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2208      	movs	r2, #8
 8004bb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e029      	b.n	8004c16 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	69db      	ldr	r3, [r3, #28]
 8004bc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bd0:	d111      	bne.n	8004bf6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f000 f81e 	bl	8004c1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2220      	movs	r2, #32
 8004be6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e00f      	b.n	8004c16 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	69da      	ldr	r2, [r3, #28]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	4013      	ands	r3, r2
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	bf0c      	ite	eq
 8004c06:	2301      	moveq	r3, #1
 8004c08:	2300      	movne	r3, #0
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	79fb      	ldrb	r3, [r7, #7]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d0a6      	beq.n	8004b62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b095      	sub	sp, #84	; 0x54
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c2e:	e853 3f00 	ldrex	r3, [r3]
 8004c32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	461a      	mov	r2, r3
 8004c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c44:	643b      	str	r3, [r7, #64]	; 0x40
 8004c46:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c4c:	e841 2300 	strex	r3, r2, [r1]
 8004c50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1e6      	bne.n	8004c26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	3308      	adds	r3, #8
 8004c5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c60:	6a3b      	ldr	r3, [r7, #32]
 8004c62:	e853 3f00 	ldrex	r3, [r3]
 8004c66:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	f023 0301 	bic.w	r3, r3, #1
 8004c6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	3308      	adds	r3, #8
 8004c76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c80:	e841 2300 	strex	r3, r2, [r1]
 8004c84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1e5      	bne.n	8004c58 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d118      	bne.n	8004cc6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	e853 3f00 	ldrex	r3, [r3]
 8004ca0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	f023 0310 	bic.w	r3, r3, #16
 8004ca8:	647b      	str	r3, [r7, #68]	; 0x44
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cb2:	61bb      	str	r3, [r7, #24]
 8004cb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb6:	6979      	ldr	r1, [r7, #20]
 8004cb8:	69ba      	ldr	r2, [r7, #24]
 8004cba:	e841 2300 	strex	r3, r2, [r1]
 8004cbe:	613b      	str	r3, [r7, #16]
   return(result);
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1e6      	bne.n	8004c94 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004cda:	bf00      	nop
 8004cdc:	3754      	adds	r7, #84	; 0x54
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr

08004ce6 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b086      	sub	sp, #24
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	60f8      	str	r0, [r7, #12]
 8004cee:	60b9      	str	r1, [r7, #8]
 8004cf0:	607a      	str	r2, [r7, #4]
 8004cf2:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e056      	b.n	8004dac <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d106      	bne.n	8004d14 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f7fc f856 	bl	8000dc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2224      	movs	r2, #36	; 0x24
 8004d18:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 0201 	bic.w	r2, r2, #1
 8004d28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f7ff fbf2 	bl	8004514 <UART_SetConfig>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d101      	bne.n	8004d3a <HAL_RS485Ex_Init+0x54>
  {
    return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e038      	b.n	8004dac <HAL_RS485Ex_Init+0xc6>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d002      	beq.n	8004d48 <HAL_RS485Ex_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f7ff fdba 	bl	80048bc <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689a      	ldr	r2, [r3, #8]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d56:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68ba      	ldr	r2, [r7, #8]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	055b      	lsls	r3, r3, #21
 8004d70:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	041b      	lsls	r3, r3, #16
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 8004d86:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	6812      	ldr	r2, [r2, #0]
 8004d8e:	6979      	ldr	r1, [r7, #20]
 8004d90:	430b      	orrs	r3, r1
 8004d92:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f042 0201 	orr.w	r2, r2, #1
 8004da2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f7ff fe2b 	bl	8004a00 <UART_CheckIdleState>
 8004daa:	4603      	mov	r3, r0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3718      	adds	r7, #24
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004dbc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004dc0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	43db      	mvns	r3, r3
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3714      	adds	r7, #20
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004dea:	b084      	sub	sp, #16
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	f107 0014 	add.w	r0, r7, #20
 8004df8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	370c      	adds	r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	b004      	add	sp, #16
 8004e2a:	4770      	bx	lr

08004e2c <memset>:
 8004e2c:	4402      	add	r2, r0
 8004e2e:	4603      	mov	r3, r0
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d100      	bne.n	8004e36 <memset+0xa>
 8004e34:	4770      	bx	lr
 8004e36:	f803 1b01 	strb.w	r1, [r3], #1
 8004e3a:	e7f9      	b.n	8004e30 <memset+0x4>

08004e3c <__libc_init_array>:
 8004e3c:	b570      	push	{r4, r5, r6, lr}
 8004e3e:	4d0d      	ldr	r5, [pc, #52]	; (8004e74 <__libc_init_array+0x38>)
 8004e40:	4c0d      	ldr	r4, [pc, #52]	; (8004e78 <__libc_init_array+0x3c>)
 8004e42:	1b64      	subs	r4, r4, r5
 8004e44:	10a4      	asrs	r4, r4, #2
 8004e46:	2600      	movs	r6, #0
 8004e48:	42a6      	cmp	r6, r4
 8004e4a:	d109      	bne.n	8004e60 <__libc_init_array+0x24>
 8004e4c:	4d0b      	ldr	r5, [pc, #44]	; (8004e7c <__libc_init_array+0x40>)
 8004e4e:	4c0c      	ldr	r4, [pc, #48]	; (8004e80 <__libc_init_array+0x44>)
 8004e50:	f000 f818 	bl	8004e84 <_init>
 8004e54:	1b64      	subs	r4, r4, r5
 8004e56:	10a4      	asrs	r4, r4, #2
 8004e58:	2600      	movs	r6, #0
 8004e5a:	42a6      	cmp	r6, r4
 8004e5c:	d105      	bne.n	8004e6a <__libc_init_array+0x2e>
 8004e5e:	bd70      	pop	{r4, r5, r6, pc}
 8004e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e64:	4798      	blx	r3
 8004e66:	3601      	adds	r6, #1
 8004e68:	e7ee      	b.n	8004e48 <__libc_init_array+0xc>
 8004e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e6e:	4798      	blx	r3
 8004e70:	3601      	adds	r6, #1
 8004e72:	e7f2      	b.n	8004e5a <__libc_init_array+0x1e>
 8004e74:	08004ed4 	.word	0x08004ed4
 8004e78:	08004ed4 	.word	0x08004ed4
 8004e7c:	08004ed4 	.word	0x08004ed4
 8004e80:	08004ed8 	.word	0x08004ed8

08004e84 <_init>:
 8004e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e86:	bf00      	nop
 8004e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e8a:	bc08      	pop	{r3}
 8004e8c:	469e      	mov	lr, r3
 8004e8e:	4770      	bx	lr

08004e90 <_fini>:
 8004e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e92:	bf00      	nop
 8004e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e96:	bc08      	pop	{r3}
 8004e98:	469e      	mov	lr, r3
 8004e9a:	4770      	bx	lr
